openapi: 3.0.3
info:
  title: MoEngage Data APIs
  version: '1.0'
  description: |-
    This is a comprehensive OpenAPI specification for MoEngage's Data APIs, including User, Event, and Device management.
    It's designed to power an interactive API playground on your new documentation site.
tags:
  - name: User
    description: Operations for creating, updating, retrieving, and managing user profiles.
  - name: Event
    description: Operations for tracking user events.
  - name: Device
    description: Operations for managing user devices.
  - name: Bulk
    description: Operations for importing users and events in bulk.
  - name: File Import
    description: Operations for managing asynchronous file imports.
  - name: Tracking
    description: Endpoints for tracking attribution and installs.
  - name: Utilities
    description: Utility endpoints for testing connections.
  - name: Webhooks
    description: Incoming webhook specifications from MoEngage.
servers:
  - url: 'https://api-0{dc}.moengage.com/v1'
    description: MoEngage Core API Server
    variables:
      dc:
        default: '1'
        description: 'Your MoEngage Data Center (DC). Can be 1, 2, 3, 4, etc.'
        enum:
          - '1'
          - '2'
          - '3'
          - '4'
  - url: 'https://fileimports-data-api-0{dc}.moengage.com/v1.0/data'
    description: MoEngage File Imports API Server
    variables:
      dc:
        default: '1'
        description: 'Your MoEngage Data Center (DC). Can be 1, 2, 3, etc.'
        enum:
          - '1'
          - '2'
          - '3'

security:
  - basicAuth: []

paths:
  /customer/{Workspace_ID}:
    post:
      tags:
        - User
      summary: Create or Update User
      description: Adds new users or updates properties of existing users in MoEngage.
      parameters:
        - name: Workspace_ID
          in: path
          required: true
          description: 'The Workspace ID of your MoEngage account. Found in Settings > Account > APIs.'
          schema:
            type: string
            example: VJ0GSMESHMQA3L7WV1EEK3UR
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            examples:
              simple:
                summary: Simple User Update
                value:
                  type: customer
                  customer_id: john@example.com
                  attributes:
                    name: John
                    platforms:
                      - platform: ANDROID
                        active: "true"
              full:
                summary: Full User Update with Custom Attributes
                value:
                  type: customer
                  customer_id: john@example.com
                  update_existing_only: true
                  attributes:
                    points: 20
                    expiry_date: '2020-05-31T03:47:35Z'
                    super_user: true
                    user_persona: browsers
                    platforms:
                      - platform: ANDROID
                        active: "true"
      responses:
        '200':
          description: Request accepted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccess'
        '400':
          description: Bad Request - Missing parameters, invalid attributes, etc.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '401':
          description: Unauthorized - Invalid authentication credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

  /customers/export:
    post:
      tags:
        - User
      summary: Get User Details
      description: Fetches user profile data for one or more specified users.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserRequest'
      responses:
        '200':
          description: Successfully retrieved user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

  /customer/merge:
    post:
      tags:
        - User
      summary: Merge Users
      description: Merges two user profiles into a single profile.
      parameters:
        - name: app_id
          in: query
          required: true
          description: The Workspace ID of your MoEngage account.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeUserRequest'
      responses:
        '200':
          description: Merge request accepted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  operation:
                    type: string
                    example: created
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

  /customer/delete/bulk:
    post:
      tags:
        - User
      summary: Delete Users in Bulk
      description: Deletes users from MoEngage. Users are permanently deleted after a 24-hour buffer period.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserRequest'
      responses:
        '200':
          description: Delete request accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccess'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

  /event/{Workspace_ID}:
    post:
      tags:
        - Event
      summary: Create Event
      description: Tracks actions performed by a user.
      parameters:
        - name: Workspace_ID
          in: path
          required: true
          description: The Workspace ID for your MoEngage account.
          schema:
            type: string
            example: OAPQQ2AMD01MJZYZX1YPG
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '200':
          description: Request accepted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccess'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

  /device/{appId}:
    post:
      tags:
        - Device
      summary: Create or Update Device
      description: Adds a new device for an existing user or updates the properties of an existing device.
      parameters:
        - name: appId
          in: path
          required: true
          description: 'The Workspace ID of your MoEngage account.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceRequest'
      responses:
        '200':
          description: Request accepted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccess'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

  /devices/manage:
    post:
      tags:
        - Device
      summary: Block or Unblock Device (Opt-out)
      description: Blocks or unblocks specific devices from receiving push notifications.
      parameters:
        - name: app_id
          in: query
          required: true
          description: 'The Workspace ID of your MoEngage account.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceOptOutRequest'
      responses:
        '200':
          description: Request accepted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccess'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

  /installInfo:
    get:
      tags:
        - Tracking
      summary: Track App Install
      description: Provides MoEngage with install attribution data.
      security: []
      parameters:
        - name: publisher_name
          in: query
          schema:
            type: string
          description: Publisher name of the install.
        - name: campaign_name
          in: query
          schema:
            type: string
          description: Campaign name of the install.
        - name: src
          in: query
          schema:
            type: string
          description: Partner name.
        - name: appId
          in: query
          required: true
          schema:
            type: string
          description: Workspace ID of your MoEngage account.
        - name: advertising_id
          in: query
          schema:
            type: string
          description: Google Advertising ID (GAID) of the device (Android only).
        - name: idfv
          in: query
          schema:
            type: string
          description: Identifier for Vendors (IDFV) of the iOS device (iOS only).
        - name: appAttributionKey
          in: query
          required: true
          schema:
            type: string
          description: Found on the MoEngage dashboard under Settings > Analytics > Acquisition Tracking.
      responses:
        '200':
          description: Install information received.
        '400':
          description: Bad request, missing required parameters.

  /integrations/authentication:
    post:
      tags:
        - Utilities
      summary: Test API Connection
      description: Validates if the provided MoEngage endpoint details (Workspace ID, Data Key) are correct and accessible.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestConnectionRequest'
      responses:
        '200':
          description: Authentication successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  app_name:
                    type: string
                    example: PI-Prod-DC01
        '401':
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

  /fileimports/trigger/{import_id}:
    post:
      tags:
        - File Import
      summary: Trigger a File Import
      description: Triggers a pre-configured, on-demand file import job.
      parameters:
        - name: import_id
          in: path
          required: true
          description: The unique ID of the import schedule to trigger.
          schema:
            type: string
      responses:
        '200':
          description: Trigger request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccess'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

  /fileimports/import/run/history:
    post:
      tags:
        - File Import
      summary: Get File Import Status
      description: Fetches the processing status of files for a specific import job.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileImportStatusRequest'
      responses:
        '200':
          description: Successfully retrieved import history.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileImportStatusResponse'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

  /transition/{Workspace_ID}:
    post:
      tags:
        - Bulk
      summary: Bulk Import Users and Events
      description: 'Send multiple user, device, and event updates in a single API request. Max payload size: 100 kB.'
      parameters:
        - name: Workspace_ID
          in: path
          required: true
          description: 'The Workspace ID of your MoEngage account.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkImportRequest'
      responses:
        '200':
          description: Request accepted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccess'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

  /webhooks/moengage-streams:
    post:
      tags:
        - Webhooks
      summary: MoEngage Streams Webhook
      description: |-
        This endpoint represents the incoming webhook from MoEngage Streams.
        Your server should be configured to accept POST requests with this payload format at your specified endpoint URL.
        This is not an API you call, but an event you receive from MoEngage.
      security: []
      requestBody:
        description: Payload sent from MoEngage Streams when an event occurs.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamsWebhookPayload'
      responses:
        '200':
          description: OK. Acknowledges successful receipt of the event data.
        '202':
          description: Accepted for processing.
        '204':
          description: No Content. Successful receipt acknowledged.

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: Basic Authentication using Workspace ID as username and Data API Key as password.
  schemas:
    GenericSuccess:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: Your request has been accepted and will be processed soon.

    GenericError:
      type: object
      properties:
        status:
          type: string
          example: fail
        error:
          type: object
          properties:
            message:
              type: string
              example: App Secret key mismatch. Please login to the dashboard to verify key
            type:
              type: string
              example: Authentication required
            request_id:
              type: string
              example: PVUDFisO
            attribute:
              type: string
              description: The attribute in the payload that caused the error.
              example: customer_id

    PlatformObject:
      type: object
      properties:
        platform:
          type: string
          enum: [ANDROID, iOS, web]
        active:
          type: string
          enum: ["true", "false"]

    UserAttributes:
      type: object
      description: A dictionary of user attributes to add or update.
      properties:
        u_n:
          type: string
          description: Full name of the user.
        u_fn:
          type: string
          description: First name of the user.
        u_ln:
          type: string
          description: Last name of the user.
        u_gd:
          type: string
          description: Gender of the user.
        u_em:
          type: string
          format: email
          description: Email Address of the user (Standard).
        u_mb:
          type: string
          description: Mobile Number of the user (Standard). Example `918888444411`.
        uid:
          type: string
          description: A unique ID set by the client for a user.
        u_bd:
          type: string
          format: date-time
          description: 'Birthdate of the user in ISO 8601 format (e.g., 2019-05-21T03:47:35Z).'
        moe_wa_subscription:
          type: boolean
          description: WhatsApp subscription status of a user.
        platforms:
          type: array
          items:
            $ref: '#/components/schemas/PlatformObject'
      additionalProperties: true
      example:
        name: John
        points: 20
        expiry_date: '2020-05-31T03:47:35Z'
        super_user: true
        user_persona: browsers
        platforms:
          - platform: ANDROID
            active: "true"

    CreateUserRequest:
      type: object
      required:
        - type
        - customer_id
      properties:
        type:
          type: string
          description: 'Identifies the type of request. Must be "customer".'
          enum: [customer]
        customer_id:
          type: string
          description: 'Unique identifier for the user. Not mandatory in Identity Resolution enabled workspaces.'
        update_existing_only:
          type: boolean
          description: 'If true, only existing users will be updated; new users will not be created.'
          default: false
        attributes:
          $ref: '#/components/schemas/UserAttributes'

    IdentifierObject:
      type: object
      properties:
        identifier_type:
          type: string
          enum: [customer_id, id]
          description: '`customer_id` is the ID in the User Profile, `id` is the MoEngageID.'
        identifier:
          type: string
          description: The unique identifier value.

    GetUserRequest:
      type: object
      properties:
        data:
          type: object
          properties:
            identifiers:
              type: array
              description: 'Array of user identifiers to fetch. Max 20 users per request.'
              items:
                $ref: '#/components/schemas/IdentifierObject'
            user_fields_to_export:
              type: array
              items:
                type: string
              description: 'Specific user fields to export. If omitted, all exportable attributes are returned.'
              example: ["last_name", "customer_id", "name"]

    GetUserResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        type:
          type: string
          example: export_users
        data:
          type: object
          properties:
            users_not_found:
              type: array
              items:
                $ref: '#/components/schemas/IdentifierObject'
            users:
              type: array
              items:
                type: object
                properties:
                  user_attributes:
                    type: object
                    additionalProperties: true
                    example:
                      last_name: Doe
                      customer_id: john_doe
                      id: 62e79fb15ada55x123g987bu

    MergeUserRequest:
      type: object
      properties:
        merge_data:
          type: array
          description: A list of user pairs to merge.
          items:
            type: object
            properties:
              merged_user:
                type: string
                description: The user ID to be merged and then deleted.
              retained_user:
                type: string
                description: The user ID that will remain and absorb the merged user's data.

    DeleteUserRequest:
      type: object
      description: 'Request body to delete users. Based on the Get User API structure.'
      properties:
        identifiers:
          type: array
          description: Array of user identifiers to delete.
          items:
            $ref: '#/components/schemas/IdentifierObject'

    EventAction:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          description: The name of the event to be tracked.
        attributes:
          type: object
          additionalProperties: true
          description: A dictionary of key-value pairs associated with the event.
          example:
            price: 3999
            departure_date: '2019-05-21T03:47:35Z'
            premium_seat: true
        platform:
          type: string
          enum: [ANDROID, iOS, web, unknown]
          description: The platform on which the event occurred.
        app_version:
          type: string
          description: The version of the app where the event originated.
        user_time:
          oneOf:
            - type: number
            - type: string
          description: Local time of the event (Epoch seconds or ISO 8601 string).
        current_time:
          oneOf:
            - type: number
            - type: string
          description: UTC time of the event (Epoch seconds or ISO 8601 string).
        user_timezone_offset:
          type: number
          description: 'Timezone offset from UTC in seconds (e.g., IST is 19800).'

    CreateEventRequest:
      type: object
      required:
        - type
        - customer_id
        - actions
      properties:
        type:
          type: string
          description: 'Identifies the type of request. Must be "event".'
          enum: [event]
        customer_id:
          type: string
          description: 'Identifier for the user performing the event.'
        device_id:
          type: string
          description: 'Optional device identifier. Defaults to customer_id if not provided.'
        user_identifiers:
          type: object
          description: 'Required if Identity Resolution is enabled and customer_id is not provided.'
          additionalProperties: true
          example:
            moe_mobile: "+919876543210"
        actions:
          type: array
          items:
            $ref: '#/components/schemas/EventAction'

    DeviceAttributes:
      type: object
      required:
        - platform
        - push_id
      properties:
        model:
          type: string
          description: The model of the device.
        platform:
          type: string
          enum: [ANDROID, iOS, web, TV]
          description: The platform of the device.
        push_id:
          type: string
          description: The push token of the device.
        moe_push_opted:
          type: string
          enum: ["True", "False"]
          description: Push opt-in status.
        app_version:
          type: string
          description: Version of the app on the device.
        os_version:
          type: string
          description: The device's operating system version.
        moe_gaid:
          type: string
          description: Google Advertising ID for Android devices.
        idfv:
          type: string
          description: Identifier for Vendors for iOS devices.

    CreateDeviceRequest:
      type: object
      required:
        - type
        - customer_id
        - device_id
        - attributes
      properties:
        type:
          type: string
          enum: [device]
        customer_id:
          type: string
          description: 'The unique identifier for the user who owns the device.'
        device_id:
          type: string
          description: 'A unique identifier for the device itself.'
        attributes:
          $ref: '#/components/schemas/DeviceAttributes'

    DeviceOptOutRequest:
      type: object
      required:
        - user_identifier_type
        - user_identifier_value
        - action_type
      properties:
        user_identifier_type:
          type: string
          description: The type of user identifier (e.g., 'customer_id').
        user_identifier_value:
          type: string
          description: The value of the user identifier.
        action_type:
          type: string
          enum: [block, unblock]
          description: Whether to block or unblock the device(s).
        reason:
          type: string
          description: Optional reason for the action.
        client_reference_id:
          type: string
          description: Optional client-side reference ID.
        device_identifiers:
          type: array
          description: 'Array of device identifiers to target. If omitted, all user devices are affected.'
          items:
            type: object
            properties:
              GAID: { type: string }
              IDFV: { type: string }
              unique_id: { type: string }
              device_unique_id: { type: string }
              push_id: { type: string }

    TestConnectionRequest:
      type: object
      required:
        - app_id
        - app_secret
        - source
        - region
      properties:
        app_id:
          type: string
          description: 'Your MoEngage Workspace ID.'
        app_secret:
          type: string
          description: 'Your MoEngage Data API Key.'
        source:
          type: string
          description: 'The tool from where you are sending the request.'
          example: test
        region:
          type: string
          description: 'Your MoEngage region (e.g., "01" for DC-01).'
          example: "01"

    FileImportStatusRequest:
      type: object
      properties:
        import_id:
          type: string
          description: 'The unique ID of the import job. Takes precedence over import_name if both are provided.'
        import_name:
          type: string
          description: 'The name of the import job.'
        date:
          type: object
          properties:
            start_date: { type: string, format: date-time }
            end_date: { type: string, format: date-time }
        file_status:
          type: array
          items:
            type: string
            enum: [SUCCESSFUL, FAILED, PARTIAL_SUCCESS, PROCESSING, QUEUED, WAITING]
        offset:
          type: integer
          description: 'Pagination offset. Each page returns 50 results.'
          default: 1

    FileImportStatusResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        total_count:
          type: integer
          example: 1
        data:
          type: array
          items:
            type: object
            properties:
              id: { type: string }
              file_name: { type: string }
              scheduled_at: { type: string, format: date-time }
              completed_at: { type: string, format: date-time }
              type: { type: string, enum: [USERS, EVENTS, AUX_DATA] }
              file_size: { type: string }
              file_status: { type: string }
              total_rows: { type: integer }
              updated_rows: { type: integer }
              failed_rows: { type: integer }
        offset:
          type: integer
        more_files:
          type: boolean

    BulkImportRequest:
      type: object
      required:
        - type
        - elements
      properties:
        type:
          type: string
          enum: [transition]
        elements:
          type: array
          description: A list of customer, device, or event data points.
          items:
            oneOf:
              - $ref: '#/components/schemas/CreateUserRequest'
              - $ref: '#/components/schemas/CreateEventRequest'
              - $ref: '#/components/schemas/CreateDeviceRequest'

    StreamsWebhookPayload:
      type: object
      properties:
        app_name: { type: string }
        source: { type: string, example: "MOENGAGE" }
        moe_request_id: { type: string, format: uuid }
        events:
          type: array
          items:
            type: object
            properties:
              event_name: { type: string }
              event_code: { type: string }
              event_uuid: { type: string, format: uuid }
              event_time: { type: integer, format: int64, description: "Epoch time in seconds" }
              event_type: { type: string, enum: [CAMPAIGN_EVENT, USER_ACTION_EVENT] }
              event_source: { type: string, example: "MOENGAGE" }
              uid: { type: string, description: "MoEngage customer_id" }
              event_attributes:
                type: object
                additionalProperties: true
              user_attributes:
                type: object
                additionalProperties: true
              device_attributes:
                type: object
                additionalProperties: true
