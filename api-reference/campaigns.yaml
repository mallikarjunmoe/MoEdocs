openapi: 3.0.3
info:
  title: Campaign API
  description: Use these APIs to create and manage your campaigns.
  version: 1.0.0
servers:
  - url: https://api-{datacenter}.moengage.com/core-services/v1
    variables:
      datacenter:
        default: '0X'
        description: >-
          Your data center number (e.g., 01, 02, 03). See [Data Centers and API
          endpoint mapping
          page](https://help.moengage.com/hc/en-us/articles/360057030512-Data-Centers-in-MoEngage#01G5DQVXGT2KZMXTJPF77QPJ25).
security:
  - BasicAuth: []
tags:
  - name: Create Campaigns
    description: Create new email and push campaigns.
  - name: Get Campaign Details
    description: Fetch details, metadata, and execution history for existing campaigns.
  - name: Update Campaigns
    description: Update existing campaigns or change their status.
  - name: Test Campaigns
    description: Send test versions of email and push campaigns.
paths:
  /campaigns:
    post:
      tags:
        - Create Campaigns
      summary: Create Campaign (Email or Push)
      description: Use this API to create an Email or Push campaign in MoEngage.
      operationId: createCampaign
      x-mint:
        content: |
          <Note>
            If this API is not enabled for your account, contact your MoEngage
            Customer Success Manager (CSM) or the Support team to request
            enablement.
          </Note>

          ### Rate Limit
          You can create 5 campaigns per minute, 25 campaigns per hour, and 100 campaigns per day.
      parameters:
        - in: header
          name: MOE-APPKEY
          required: true
          schema: { type: string }
          description: >-
            This is the workspace ID (earlier APP ID) of your MoEngage workspace.
            Navigate to **Settings** -> **Account** -> **APIs** -> **Workspace
            ID (earlier app id)**.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreateEmailCampaignRequest'
                - $ref: '#/components/schemas/CreatePushCampaignRequest'
              discriminator: { propertyName: channel }
      responses:
        '201':
          description: Successful campaign creation.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreateCampaignSuccessResponse' }
              examples: { Success: { value: { campaign_id: '{Campaign_ID}' } } }
        '400':
          description: Bad Request. Required parameters are missing or invalid.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '401':
          description: Authentication Failure. Authorization parameters are missing or invalid.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '429':
          description: Rate Limit Breach. The number of requests per minute has exceeded the rate limit.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '500':
          description: Internal Server Error. The system ran into an unexpected error.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }

  /campaigns/search:
    post:
      tags:
        - Get Campaign Details
      summary: Search Campaign Details (Email, Push, SMS)
      description: Fetches a list of campaigns based on specified filters, including current fields and status. Supports filtering by channel, ID, name, status, dates, etc.
      operationId: searchCampaigns
      x-mint:
        content: |
          <Note>
            If this API is not enabled for your account, contact your MoEngage
            Customer Success Manager (CSM) or the Support team to request
            enablement.
          </Note>
      parameters:
        - in: header
          name: MOE-APPKEY
          required: true
          schema: { type: string }
          description: >-
            This is the workspace ID (earlier APP ID) of your MoEngage workspace.
            Navigate to **Settings** -> **Account** -> **APIs** -> **Workspace
            ID (earlier app id)**.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SearchCampaignsRequest' }
            examples:
              ByChannel_Email: { summary: Filter by Email Channel, value: { campaign_fields: { channels: [EMAIL] }, limit: 5, page: 1, request_id: '12345' } }
              ByChannel_Push: { summary: Filter by Push Channel, value: { campaign_fields: { channels: [PUSH] }, limit: 15, page: 1, request_id: 'req_push_channel' } }
              ByChannel_Sms: { summary: Filter by SMS Channel, value: { campaign_fields: { channels: [SMS] }, limit: 15, page: 1, request_id: 'req_sms_channel' } }
              ByDeliveryType: { summary: Filter by Delivery Type, value: { campaign_fields: { delivery_type: [PERIODIC] }, limit: 15, page: 1, request_id: '12345' } }
              ByCreatedDate: { summary: Filter by Created Date Range, value: { campaign_fields: { created_date: { from_date: '2024-06-16', to_date: '2024-06-21' } }, limit: 15, page: 1, request_id: '12345' } }
              ByAllFields: { summary: Filter by Multiple Fields (Push Example), value: { campaign_fields: { channels: [PUSH], created_by: ["abc@gmail.com"], created_date: { from_date: '2021-04-22', to_date: '2021-04-23' }, id: '{{campaign_id}}', name: 'push campaign', status: [ACTIVE], tags: [tag1] }, limit: 15, page: 1, request_id: '{{request_id}}' } }
      responses:
        '200':
          description: Successfully retrieved campaign details. Returns an array of campaign objects.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SearchCampaignsResponse' }
              examples:
                SuccessEmailExample:
                  summary: Example Success Response (Email)
                  value:
                    - campaign_id: '{Campaign_ID}'
                      channel: EMAIL
                      status: Active
                      basic_details:
                        name: 'happy flow campaigns api'
                        content_type: PROMOTIONAL
                        team: campaign_core
                        tags: [activation]
                        subscription_category: music
                        user_attribute_identifier: MOE_EMAIL_ID
                SuccessPushExample:
                  summary: Example Success Response (Push)
                  value:
                    - campaign_id: '{Campaign_ID}'
                      channel: PUSH
                      status: 'Fetching users in segment'
                      basic_details:
                        name: '{{campaign_name}}'
                        team: '{{team_name}}'
                        platforms: [ANDROID]
                SuccessSmsExample:
                  summary: Example Success Response (SMS)
                  value:
                    - campaign_id: '{Campaign_ID}'
                      channel: SMS
                      status: Active
                      basic_details:
                        name: 'campaign name'
                        team: 'team1'
                        tags: [tag_name1, tag_name2]
                        user_attribute_identifier: 'Mobile Number(Standard)'
        '400':
          description: Bad Request. Required parameters are missing or invalid.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '401':
          description: Authentication Failure.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '500':
          description: Internal Server Error.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }

  /campaigns/meta:
    post:
      tags:
        - Get Campaign Details
      summary: Get Campaign Metadata and Reachability
      description: Get the details of the campaign as well as the reachability of scheduled campaigns.
      operationId: getCampaignMeta
      x-mint:
        content: |
          <Note>
            * The `reachability_details` info is only generated for scheduled **One-Time**, **Business Event-Triggered**, and **Event-Triggered** campaigns.
            * Reachability is an estimated value, calculated once daily and cached for 24 hours.
          </Note>
      parameters:
        - in: header
          name: MOE-APPKEY
          required: true
          schema: { type: string }
          description: Your MoEngage Workspace ID.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CampaignMetaRequest' }
            examples:
              ByAllFields:
                summary: Filter by Multiple Fields
                value: { request_id: '12345', page: 1, limit: 15, campaign_fields: { channels: [EMAIL], created_by: ["abc@gmail.com"], created_date: { from_date: '22-11-2024', to_date: '29-11-2024' }, delivery_type: [ONE_TIME], id: '123456789', name: 'campaign_name', status: [SCHEDULED], tags: [tag1] } }
      responses:
        '200':
          description: Successfully retrieved campaign metadata. Returns an array of campaign meta objects.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CampaignMetaResponse' }
              examples:
                Default:
                  summary: Example Response (Non-Scheduled)
                  value: [ { campaign_id: '{{Campaign_id}}', channel: WHATSAPP, platform: [], created_by: 'johndoe@abc.com', campaign_delivery_type: ONE_TIME, campaign_name: '{{Campaign_name}}', campaign_team: '{{Campaign_team}}', campaign_tags: [], campaign_status: Retired, campaign_start_time: '2024-11-18T05:50:00' } ]
                Scheduled:
                  summary: Example Response (Scheduled)
                  value: [ { campaign_id: '{{Campaign_id}}', channel: SMS, platform: [], created_by: 'john.doe@abc.com', campaign_delivery_type: ONE_TIME, campaign_name: '{{Campaign_name}}', campaign_team: '{{Campaign_team}}', campaign_tags: [], campaign_status: Scheduled, campaign_start_time: '2024-11-28T12:18:00', reachability_details: { count: 18182, last_updated_time: '2024-11-27T09:05:42.661000' } } ]
        '400':
          description: Bad Request. Required parameters (limit, page, request_id) are missing or invalid.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '401':
          description: Authentication Failure.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '500':
          description: Internal Server Error.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }

  /campaigns/status:
    post:
      tags:
        - Update Campaigns
      summary: Change Campaign Status
      description: Stop, Pause, or Resume a campaign created via API.
      operationId: changeCampaignStatus
      x-mint:
        content: |
          <Note>
            * You can only update the status of **Email** and **Push** campaigns created via the API.
            * `STOP`: Use to stop a **Scheduled** One-Time campaign. You cannot stop a One-Time campaign that is already in the "Active" (sending) state.
            * `PAUSE`: Use to pause **Periodic**, **Event-Triggered**, **Device-Triggered**, or **Location-Triggered** campaigns.
            * `RESUME`: Use to resume a campaign that was **Paused**.
          </Note>
      parameters:
        - in: header
          name: MOE-APPKEY
          required: true
          schema: { type: string }
          description: Your MoEngage Workspace ID.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ChangeCampaignStatusRequest' }
            examples:
              Pause:
                summary: Pause a Campaign
                value: { action: PAUSE, campaign_ids: ['{Campaign_ID}'], request_id: '12345' }
              Resume:
                summary: Resume a Campaign
                value: { action: RESUME, campaign_ids: ['{Campaign_ID}'], request_id: '12346' }
              Stop:
                summary: Stop a Scheduled Campaign
                value: { action: STOP, campaign_ids: ['{Campaign_ID}'], request_id: '12347' }
      responses:
        '200':
          description: Campaign status update request processed successfully.
          content:
            application/json:
              schema: { type: object } # Empty object {}
              examples:
                Success: { value: {} }
        '400':
          description: Bad Request. Invalid action, campaign ID, or action not applicable to campaign type/status.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '401':
          description: Authentication Failure.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '500':
          description: Internal Server Error.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }

  /campaigns/test:
    post:
      tags:
        - Test Campaigns
      summary: Send Test Campaign (Email or Push)
      description: Sends a test version of an Email or Push campaign configuration to specified identifiers.
      operationId: testCampaign
      x-mint:
        content: |
          <Note>
            * You can test only campaigns created using the Create Campaign APIs.
            * Currently supports **Email** and **Push** channels only.
            * **Personalization:** If `personalization_details` are provided, those values override user profile data for the test send. If omitted, data from the user profiles matching `identifier_values` will be used. The same personalization details apply to all recipients in the test.
            * Max 10 users per test request.
            * If using identifier `EMAIL` for an Email test, personalization from user profiles will **not** be applied; use `ID` or `CUSTOM_SEGMENT` with personalization details for accurate previews.
          </Note>
      parameters:
        - in: header
          name: MOE-APPKEY
          required: true
          schema: { type: string }
          description: Your MoEngage Workspace ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/TestEmailCampaignRequest'
                - $ref: '#/components/schemas/TestPushCampaignRequest'
              discriminator: { propertyName: channel }
            examples:
              TestEmailWithPersonalization:
                summary: Test Email with Personalization Override
                value:
                  request_id: 'uuid2'
                  channel: EMAIL
                  basic_details:
                    name: Test campaign
                    team: TestTeam
                    tags: ['all users', activation]
                    user_attribute_identifier: MOE_EMAIL_ID
                    subscription_category: k8s_sanithy
                    content_type: PROMOTIONAL
                  connector:
                    connector_type: SENDGRID
                    connector_name: Sample_Connector
                  campaign_content:
                    content:
                      Default:
                        variation_1:
                          email: {}
                  personalization_details:
                    user_attributes:
                      pers_attr_1: {}
                      pers_attr_2: {}
                    event_attributes:
                      pers_attr_1: {}
                      pers_attr_2: {}
                  test_campaign_meta:
                    identifier: ID
                    identifier_values: [mahesh_groceriesmailosaurFCUSER1.com]
                    locale_name: revivallocale
                    variation: variation_2
              TestPushByIdentifier:
                summary: Test Push to Specific User IDs
                value:
                  request_id: 'test-push-req-1'
                  channel: PUSH
                  basic_details:
                    name: '{{campaign_name}}'
                    team: '{{team_name}}'
                    platforms: [IOS]
                  campaign_content:
                    content:
                      push:
                        ios: {}
                  test_campaign_meta:
                    identifier: USER_ATTRIBUTE_UNIQUE_ID
                    identifier_values: [john012]
              TestPushCustomSegment:
                summary: Test Push to Custom Segment
                value:
                  request_id: 'test-push-req-2'
                  channel: PUSH
                  basic_details:
                    name: '{{campaign_name}}'
                    team: '{{team_name}}'
                    platforms: [ANDROID]
                  campaign_content:
                    content:
                      push:
                        android: {}
                  test_campaign_meta:
                    identifier: CUSTOM_SEGMENT
                    identifier_values: ["segment_id_or_name"]
      responses:
        '200':
          description: Test campaign request processed successfully. Check 'data' for status per identifier.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TestCampaignResponse' }
              examples:
                Success: { value: { data: { "john.doe@example.com": { status: success } }, message: Test campaign created successfully } }
                PartialFailure: { value: { data: { "user1@example.com": { status: success }, "user2@example.com": { status: failed, failure_reason: "User not found" } }, message: Test campaign processed } }
        '400':
          description: Bad Request. Invalid request body, missing required fields, invalid identifier, etc.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '401':
          description: Authentication Failure.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '500':
          description: Internal Server Error.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }

  /campaigns/{campaign_id}:
    patch:
      tags:
        - Update Campaigns
      summary: Update Campaign (Email or Push)
      description: Updates specific fields of an existing Email or Push campaign created via API. Only include the fields/objects you want to change.
      operationId: updateCampaign
      x-mint:
        content: |
          <Note>
            * You can update only those campaigns created using the Create Campaign APIs, not campaigns created through the MoEngage UI.
            * Pass **only** the objects and fields you wish to update. To update a single field within an object (e.g., `title` within `basic_details`), you must pass the **entire object** with the updated field value.
            * Campaigns can be updated in any state except **Stopped** and **Archived**.
            * If a campaign is **Scheduled**: You can edit all fields *except* `scheduling_details.delivery_type` for One-Time campaigns, or for Periodic/Event-Triggered campaigns where no instances have been sent yet.
            * If a campaign is **Active**: You **cannot** edit `trigger_condition`, `segmentation_details`, `conversion_goal_details`, `scheduling_details.delivery_type`, or `scheduling_details.start_time`.
          </Note>
      parameters:
        - in: path
          name: campaign_id
          required: true
          schema: { type: string }
          description: The unique ID of the campaign to update.
        - in: header
          name: MOE-APPKEY
          required: true
          schema: { type: string }
          description: Your MoEngage Workspace ID.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateCampaignRequest' }
            examples:
              UpdateEmailDetails:
                summary: Update Email Basic Details
                value: { request_id: '34423', updated_by: john.doe@example.com, basic_details: { name: 'edited one time campaign edited', tags: [engagement, 'all users'], user_attribute_identifier: John, content_type: PROMOTIONAL } }
              UpdatePushContent:
                summary: Update Push Content and Schedule
                value: { request_id: 'push-update-req-1', updated_by: jane.doe@example.com, campaign_content: { content: { push: { android: { template_type: BASIC, basic_details: { notification_channel: general, title: 'Updated Push Title!', message: New message content., default_click_action: DEEPLINKING, default_click_action_value: "https://newlink.com" } } } } }, scheduling_details: { expiry_time: '2026-08-20T14:00:00Z' } }
      responses:
        '204':
          description: Campaign updated successfully. No content returned.
        '400':
          description: Bad Request. Invalid fields, missing required fields within an object being updated, or trying to update immutable fields based on campaign state.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '401':
          description: Authentication Failure.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '404':
          description: Not Found. The specified campaign_id does not exist or was not created via API.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '500':
          description: Internal Server Error.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }

  /campaigns/{parent_campaign_id}/executions:
    post:
      tags:
        - Get Campaign Details
      summary: Get Child Campaign Executions
      description: Get the child campaign details (executions) of a Periodic or Business Event-triggered campaign.
      operationId: getChildCampaignExecutions
      x-mint:
        content: |
          <Note>
            * This API supports Periodic and Business Event-Triggered campaigns for **Email** and **Push** channels.
            * You can only get details for parent campaigns that were created via the API.
          </Note>
      parameters:
        - in: path
          name: parent_campaign_id
          required: true
          schema: { type: string }
          description: The unique ID of the parent campaign (Periodic or Business Event-Triggered).
        - in: header
          name: MOE-APPKEY
          required: true
          schema: { type: string }
          description: Your MoEngage Workspace ID.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GetChildCampaignsRequest' }
            examples:
              Default:
                summary: Get First Page of Executions
                value: { request_id: '12347', page: 1, limit: 15 }
      responses:
        '200':
          description: Successfully retrieved child campaign executions.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GetChildCampaignsResponse' }
              examples:
                Success: { value: { executions: [ { campaign_id: '{Child_Campaign_ID_1}', sent_time: '2024-06-24T14:30:18.908000', status: Sent }, { campaign_id: '{Child_Campaign_ID_2}', sent_time: '2024-06-24T15:27:45.971000', status: Sent } ], total_instances: 8 } }
        '400':
          description: Bad Request. Required parameters (limit, page, request_id) are missing or invalid.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '401':
          description: Authentication Failure.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '404':
          description: Not Found. The specified parent_campaign_id does not exist or is not a valid parent campaign.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '500':
          description: Internal Server Error.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }

  /personalization/preview:
    post:
      tags:
        - Test Campaigns
      summary: Get Personalized Content Preview
      description: Preview personalized content (like email subject, push message, or custom template) for a specific user.
      operationId: getPersonalizedPreview
      x-mint:
        content: |
          <Note>
            * If `user_details` are provided, attributes will be fetched from that user's profile and *merged* with `personalization_details` (which take precedence).
            * If `user_details` are omitted, only attributes from `personalization_details` will be used.
            * `event_name` is required if you are personalizing content with event attributes.
            * You must provide *either* the `payload` object *or* the `custom_template_data` object in the request.
            * Rate Limit: 10,000 requests per minute.
          </Note>
      parameters:
        - in: header
          name: MOE-APPKEY
          required: true
          schema: { type: string }
          description: Your MoEngage Workspace ID.
        - in: header
          name: data-compression
          schema: { type: boolean }
          description: Set to true to send the payload in a compressed format.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PersonalizedPreviewRequest' }
            examples:
              UserAttribute:
                summary: Preview with User Attributes
                value: { request_id: '2', personalization_details: { event_name: MOE_USER_PROFILE_UPDATED, channel: EMAIL, user_attributes: { Gender: Female } }, personalization_content: { payload: { user_attribute_personalization: "<!DOCTYPE html>...Hi {{UserAttribute['First Name']}}...Gender: {{UserAttribute['Gender']}}...</html>" } }, user_details: { identifier: ID, identifier_value: JOHN012 } }
              EventAttribute:
                summary: Preview with Event Attributes
                value: { request_id: '2', personalization_details: { event_name: App_Opened, channel: EMAIL, user_attributes: { Gender: Female }, event_attributes: { App_Version: 1.0.2 } }, personalization_content: { payload: { event_attribute_personalisation: "<!DOCTYPE html>...App_Version: {{EventAttribute['App_Version']}}...Gender: {{UserAttribute['Gender']}}...</html>" } }, user_details: { identifier: ID, identifier_value: JOHN012 } }
              CustomTemplate:
                summary: Preview Custom Template
                value: { request_id: '12345', personalization_details: { event_name: App_Opened, channel: PUSH, user_attributes: { 'First Name': John }, event_attributes: { 'App Version': '34232' } }, personalization_content: { custom_template_data: { template_id: 5b7d04c6-8ddc-4957-80d9-c67266079609, version: '1' } }, user_details: { identifier: ID, identifier_value: JOHN012 } }
              ContentBlock:
                summary: Preview Content Block
                value: { request_id: '12345', personalization_details: { event_name: App_Opened, channel: SMS, user_attributes: { 'First Name': 'John Doe' } }, personalization_content: { payload: { 'Content Block': "{{ContentBlock['simple_text_cb']}}" } }, user_details: { identifier: ID, identifier_value: JOHN012 } }
              ContentApi:
                summary: Preview Content API
                value: { request_id: '12345', personalization_details: { channel: SMS, user_attributes: { 'First Name': 'John Doe' } }, personalization_content: { payload: { 'Content Api': "{% set var=ContentApi.testing_content_api({ ... }})%}{{var.name}}" } }, user_details: { identifier: ID, identifier_value: JOHN012 } }
              ProductSet:
                summary: Preview Product Set
                value: { request_id: '12345', personalization_details: { channel: SMS }, personalization_content: { payload: { product_set: "{% if ProductSet.test_prod%}{% for product in ProductSet.test_prod%}{{product.title}} {% endfor %}{% else %}MOE_NOT_SEND{% endif %}" } }, user_details: { identifier: ID, identifier_value: JOHN012 } }
      responses:
        '200':
          description: Successfully retrieved personalized content preview.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PersonalizedPreviewResponse' }
              examples:
                UserAttribute: { summary: User Attribute Preview, value: { personalized_content: { payload: { user_attribute_personalization: "<!DOCTYPE html>...Gender: Female...</html>" } } } }
                ContentApi: { summary: Content API Preview, value: { personalized_content: { payload: { content_api: "{'coord': ... 'name': 'Delhi', 'cod': 200}" } } } }
                ProductSet: { summary: Product Set Preview, value: { personalized_content: { payload: { product_set: "Brown Rang Banana Chocolate Zomato Wine..." } } } }
        '400':
          description: Bad Request. Invalid request body, missing required fields (e.g., channel, template_id), etc.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '401':
          description: Authentication Failure.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '429':
          description: Too Many Requests. Rate limit breached.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
        '500':
          description: Internal Server Error.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    # --- Shared Schemas (Used by Create, Get, Update, Test) ---
    BasicDetailsShared:
      type: object
      required: [name]
      properties:
        business_event: { type: string, description: The business event to be mapped. Required for business event-triggered campaigns. }
        name: { type: string, description: The name of the campaign. }
        tags: { type: array, items: { type: string }, description: Provides context about the campaigns. }
        team: { type: string, description: Name of a group of users collaborating on the same campaign. }
    EmailBasicDetails:
      allOf:
        - $ref: '#/components/schemas/BasicDetailsShared'
        - type: object
          required: [name, content_type, user_attribute_identifier]
          properties:
            content_type: { type: string, enum: [PROMOTIONAL, TRANSACTIONAL] }
            subscription_category: { type: string, description: Mandatory for promotional emails. }
            user_attribute_identifier: { type: string, description: "User attribute storing email (e.g., MOE_EMAIL_ID)." }
    PushBasicDetails:
      allOf:
        - $ref: '#/components/schemas/BasicDetailsShared'
        - type: object
          required: [platforms, platform_specific_details]
          properties:
            platforms: { type: array, items: { type: string, enum: [ANDROID, IOS, WEB] }, minItems: 1 }
            broadcast_live_activity_id: { type: string, description: Required if platform is iOS and delivery_type is BROADCAST_LIVE_ACTIVITY. }
            geofences: { type: array, items: { $ref: '#/components/schemas/Geofence' }, description: Required for location-triggered campaigns. }
            send_to_triggered_platform_only: { type: boolean, description: Applies to event-triggered push campaigns. }
            platform_specific_details: { type: object, properties: { android: { $ref: '#/components/schemas/PlatformSpecificAndroid' }, ios: { $ref: '#/components/schemas/PlatformSpecificIos' } }, description: Platform-specific settings. }
    SmsBasicDetails:
      allOf:
        - $ref: '#/components/schemas/BasicDetailsShared'
        - type: object
          required: [user_attribute_identifier]
          properties:
            user_attribute_identifier: { type: string, description: "User attribute storing mobile number (e.g., Mobile Number(Standard))." }
    SegmentationDetails:
      type: object
      properties:
        excluded_filters: { $ref: '#/components/schemas/FilterGroup' }
        included_filters: { $ref: '#/components/schemas/FilterGroup' }
        is_all_user_campaign: { type: boolean }
        send_campaign_to_opt_out_users: { type: boolean }
    FilterGroup:
      type: object
      required: [filter_operator, filters]
      properties:
        filter_operator: { type: string, enum: [and, or] }
        filters: { type: array, items: { $ref: '#/components/schemas/FilterObject' } }
    FilterObject:
      type: object
      oneOf:
        - { $ref: '#/components/schemas/UserAttributeFilter' }
        - { $ref: '#/components/schemas/ActionFilter' }
        - { $ref: '#/components/schemas/CustomSegmentFilter' }
    UserAttributeFilter:
      type: object
      required: [data_type, category, name, filter_type, operator]
      properties:
        data_type: { type: string, enum: [string, double, datetime, bool] }
        category: { type: string }
        name: { type: string }
        filter_type: { type: string, enum: [user_attributes] }
        case_sensitive: { type: boolean }
        operator: { type: string }
        value: { description: Required for all operators except 'exists'. }
        project_name: { type: string }
    ActionFilter:
      type: object
      required: [filter_type, action_name]
      properties:
        filter_type: { type: string, enum: [actions] }
        action_name: { type: string }
        execution: { type: object, properties: { count: { type: integer }, type: { type: string, enum: [atleast] } } }
        executed: { type: boolean }
        attributes: { $ref: '#/components/schemas/FilterGroup' }
    CustomSegmentFilter:
      type: object
      required: [filter_type, name, id]
      properties:
        filter_type: { type: string, enum: [custom_segments] }
        name: { type: string, default: segment }
        id: { type: string, description: The ID of the custom segment. }
    ControlGroupDetails:
      type: object
      properties:
        is_campaign_control_group_enabled: { type: boolean }
        campaign_control_group_percentage: { type: number } # Changed to number based on response example
        is_global_control_group_enabled: { type: boolean }
    UtmParams:
      type: object
      properties: # Made all optional for Get/Update, required only on Create
        utm_source: { type: string }
        utm_medium: { type: string }
        utm_campaign: { type: string }
        utm_term: { type: string }
        utm_content: { type: string }
        utm_custom: { type: string }
    SchedulingDetails:
      type: object
      required: [delivery_type]
      properties:
        bts_details: { $ref: '#/components/schemas/BtsDetails' }
        delivery_type: { type: string }
        expiry_time: { type: string, format: date-time }
        periodic_details: { $ref: '#/components/schemas/PeriodicDetails' }
        start_time: { type: string, format: date-time }
        user_timezone_details: { $ref: '#/components/schemas/UserTimezoneDetails' }
    BtsDetails:
      type: object
      properties:
        if_user_bts_is_not_available: { type: string }
        if_user_bts_outside_time_window: { type: string }
        send_in_bts: { type: boolean }
        window_end_time: { type: string }
    PeriodicDetails:
      type: object
      properties:
        no_of_occurences: { type: number }
        repeat_frequency: { type: number }
        repeat_on_date_of_month: { type: array, items: { type: integer } }
        repeat_on_days_of_week_for_month: { type: array, items: { type: object, properties: { week_granularity: { type: string }, repeat_on_days_of_week: { type: array, items: { type: string } } } } }
        repeat_on_days_of_week: { type: array, items: { type: string } }
        sending_frequency: { type: string, enum: [DAILY, WEEKLY, MONTHLY] }
    UserTimezoneDetails:
      type: object
      properties:
        send_if_user_timezone_has_passed: { type: boolean }
        send_in_user_timezone: { type: boolean }
    ConversionGoalDetails:
      type: object
      properties:
        attribution_window_in_hours: { type: number }
        goals: { type: array, items: { $ref: '#/components/schemas/GoalItem' } }
    GoalItem:
      type: object
      properties:
        goal_event_attribute: { $ref: '#/components/schemas/GoalEventAttribute' }
        goal_event_name: { type: string }
        goal_name: { type: string }
        is_primary_goal: { type: boolean }
        revenue_attribute: { type: string }
        revenue_currency: { type: string }
    GoalEventAttribute:
      type: object
      properties:
        condition: { type: string }
        is_case_sensitive: { type: boolean }
        name: { type: string }
        value: { } # Can be string or boolean based on examples
    DeliveryControls:
      type: object
      properties:
        bypass_dnd: { type: boolean }
        campaign_throttle_rpm: { type: number }
        count_for_frequency_capping: { type: boolean }
        ignore_frequency_capping: { type: boolean }
        minimum_delay_between_two_notification_in_hour: { type: number }
        max_time_to_show_message_of_same_campaign: { type: string }
        expiry_time_of_sync_data_in_hour: { type: string }
        send_message_in_offline_mode: { type: boolean }
        send_limit_value: { type: string }
        send_limit_granularity_in_hours: { type: string }
    CampaignAudienceLimit:
      type: object
      properties:
        limit: { type: integer }
        metrics: { type: string }
        frequency: { type: string }
    ErrorResponse:
      type: object
      properties:
        error: { $ref: '#/components/schemas/ErrorObject' }
    ErrorObject:
      type: object
      properties:
        code: { type: string, example: '400 Bad Request' }
        message: { type: string, example: request_id key is mandatory field }
        target: { type: string, example: request_id }
        details: { type: array, items: { $ref: '#/components/schemas/ErrorDetail' } }
        request_id: { type: string, example: '11' }
    ErrorDetail:
      type: object
      properties:
        code: { type: string, example: InvalidValue }
        target: { type: string, example: request_id }
        message: { } # Can be string or array
    KeyValuePairsArray:
      type: array
      items:
        type: object
        properties:
          key: { type: string }
          value: { type: string }
    VariationDetails:
      type: object
      required: [distribution_type, no_of_variations]
      properties:
        distribution_type: { type: string, enum: [SHERPA, MANUAL] }
        manual_distribution_percentage: { type: object, additionalProperties: { type: string }, example: { variation_1: '40', variation_2: '50' } }
        no_of_variations: { type: number }
        sherpa_campaign_duration: { type: number }
        sherpa_distribution_metric: { type: string, enum: ['OPEN RATE', 'CLICK RATE', 'BOTH'] }
    TriggerCondition:
      type: object
      properties:
        included_filters: { $ref: '#/components/schemas/FilterGroup' }
        secondary_included_filters: { $ref: '#/components/schemas/FilterGroup' }
        trigger_delay_type: { type: string, enum: [DELAY, ASAP, INTELLIGENT_DELAY] }
        trigger_delay_value: { type: integer }
        trigger_delay_granularity: { type: string, enum: [DAYS, HOURS, MINUTES] }
        trigger_relation: { type: string, enum: [BEFORE, AFTER] }
        trigger_attr: { } # Schema not defined
        intelligent_delay_optimization: { $ref: '#/components/schemas/IntelligentDelayOptimization' }
    IntelligentDelayOptimization:
      type: object
      required: [min_delay_value, min_delay_granularity, max_delay_value, max_delay_granularity]
      properties:
          min_delay_value: { type: integer }
          min_delay_granularity: { type: string, enum: [MINUTES, HOURS] }
          max_delay_value: { type: integer }
          max_delay_granularity: { type: string, enum: [HOURS, DAYS] }

    # --- Create Campaign Schemas ---
    CreateCampaignRequestBase:
      type: object
      required: [request_id, campaign_delivery_type, created_by, segmentation_details, scheduling_details, delivery_controls]
      properties:
        request_id: { type: string, description: Unique request ID. }
        campaign_delivery_type: { type: string, enum: [ONE_TIME, PERIODIC, EVENT_TRIGGERED, BUSINESS_EVENT_TRIGGERED, DEVICE_TRIGGERED, LOCATION_TRIGGERED, BROADCAST_LIVE_ACTIVITY] }
        created_by: { type: string, format: email, description: Email ID of campaign creator. }
        trigger_condition: { $ref: '#/components/schemas/TriggerCondition' }
        segmentation_details: { $ref: '#/components/schemas/SegmentationDetails' }
        control_group_details: { $ref: '#/components/schemas/ControlGroupDetails' }
        utm_params: { $ref: '#/components/schemas/UtmParams' }
        scheduling_details: { $ref: '#/components/schemas/SchedulingDetails' }
        conversion_goal_details: { $ref: '#/components/schemas/ConversionGoalDetails' }
        delivery_controls: { $ref: '#/components/schemas/DeliveryControls' }
        campaign_audience_limit: { $ref: '#/components/schemas/CampaignAudienceLimit' }
        advanced: { $ref: '#/components/schemas/AdvancedPushSettings' }
    CreateEmailCampaignRequest:
      allOf: [ { $ref: '#/components/schemas/CreateCampaignRequestBase' } ]
      type: object
      required: [channel, basic_details, connector, campaign_content]
      properties:
        channel: { type: string, enum: [EMAIL] }
        basic_details: { $ref: '#/components/schemas/EmailBasicDetails' }
        connector: { $ref: '#/components/schemas/ConnectorDetails' }
        campaign_content: { $ref: '#/components/schemas/CampaignContentEmail' }
    ConnectorDetails:
      type: object
      required: [connector_name, connector_type]
      properties:
        connector_name: { type: string }
        connector_type: { type: string }
    CampaignContentEmail:
      type: object
      required: [content]
      properties:
        content:
          oneOf:
            - { $ref: '#/components/schemas/SimpleEmailContent' }
            - { $ref: '#/components/schemas/LocaleVariationContent' }
        locales: { type: array, items: { type: string } }
        variation_details: { $ref: '#/components/schemas/VariationDetails' }
    SimpleEmailContent:
      type: object
      properties: { email: { $ref: '#/components/schemas/EmailDetails' } }
    LocaleVariationContent:
      type: object
      additionalProperties: { $ref: '#/components/schemas/VariationContent' }
    VariationContent:
      type: object
      additionalProperties: { type: object, properties: { email: { $ref: '#/components/schemas/EmailDetails' } } }
    EmailDetails:
      type: object
      required: [from_address, reply_to_address, sender_name, subject]
      properties:
        attachments: { type: array, items: { type: object, properties: { file_type: { type: string, enum: [URL, PERSONALIZED_ATTACHMENT] }, url: { type: string } } } }
        bcc_ids: { type: array, items: { type: string, format: email } }
        cc_ids: { type: array, items: { type: string, format: email } }
        from_address: { type: string, format: email }
        custom_template_id: { type: string }
        custom_template_version: { type: integer }
        html_content: { type: string }
        preview_text: { type: string }
        reply_to_address: { type: string, format: email }
        sender_name: { type: string }
        subject: { type: string }
    CreatePushCampaignRequest:
      allOf: [ { $ref: '#/components/schemas/CreateCampaignRequestBase' } ]
      type: object
      required: [channel, basic_details, campaign_content, advanced]
      properties:
        channel: { type: string, enum: [PUSH] }
        basic_details: { $ref: '#/components/schemas/PushBasicDetails' }
        campaign_content: { $ref: '#/components/schemas/CampaignContentPush' }
        advanced: { $ref: '#/components/schemas/AdvancedPushSettings' }
    PlatformSpecificAndroid:
      type: object
      properties: { push_amp_plus_enabled: { type: boolean, default: false } }
    PlatformSpecificIos:
      type: object
      properties:
        send_to_all_eligible_device: { type: boolean }
        exclude_provisional_push_devices: { type: boolean }
        send_to_only_provisional_push_enabled_devices: { type: boolean }
    Geofence:
      type: object
      required: [name, latitude, longitude, radius, response_time_value, response_time_granularity, triggered_at]
      properties:
        name: { type: string }
        latitude: { type: string }
        longitude: { type: string }
        radius: { type: string }
        dwell_time_value: { type: string, description: Required if triggered_at is 'dwell'. }
        dwell_time_granularity: { type: string, enum: [MINUTES, HOURS, DAYS], description: Required if triggered_at is 'dwell'. }
        response_time_value: { type: string }
        response_time_granularity: { type: string, enum: [MINUTES, HOURS, DAYS] }
        triggered_at: { type: string, enum: [ENTRY, EXIT, dwell] }
    CampaignContentPush:
      type: object
      required: [content]
      properties:
        content: { $ref: '#/components/schemas/PushContentObject' }
        locales: { type: array, items: { type: string } }
        variation_details: { $ref: '#/components/schemas/VariationDetails' }
    PushContentObject:
      type: object
      oneOf:
        - { type: object, title: Direct Platform Content, properties: { push: { $ref: '#/components/schemas/PushPlatformContent' } } }
        - { type: object, title: Locale and Variation Content, additionalProperties: { $ref: '#/components/schemas/PushVariationContent' } }
    PushVariationContent:
      type: object
      additionalProperties: { type: object, properties: { push: { $ref: '#/components/schemas/PushPlatformContent' } } }
    PushPlatformContent:
      type: object
      properties:
        android: { $ref: '#/components/schemas/PushAndroidDetails' }
        ios: { $ref: '#/components/schemas/PushIosDetails' }
        web: { $ref: '#/components/schemas/PushWebDetails' }
    PushAndroidDetails:
      type: object
      required: [template_type]
      properties:
        template_type: { type: string, enum: [BASIC, STYLIZED_BASIC, SIMPLE_IMAGE_CAROUSEL, IMAGE_BANNER_WITH_TEXT, TIMER, TIMER_WITH_PROGRESS_BAR, Custom] }
        basic_details: { $ref: '#/components/schemas/PushAndroidBasic' }
        timer: { $ref: '#/components/schemas/PushTimerDetails' }
        buttons: { type: array, items: { $ref: '#/components/schemas/PushButtonAndroid' } }
        advanced: { $ref: '#/components/schemas/PushAndroidAdvanced' }
        template_backup: { $ref: '#/components/schemas/PushAndroidTemplateBackup' }
        custom_template_id: { type: string }
        custom_template_version: { type: integer }
    PushAndroidBasic:
      type: object
      required: [notification_channel, title, message, default_click_action]
      properties:
        notification_channel: { type: string, example: general }
        include_app_name_and_time: { type: boolean }
        background_color_code: { type: string }
        app_name_color_code: { type: string }
        notification_control_color: { type: string }
        include_title_and_message: { type: boolean }
        apply_background_color_in_text_editor: { type: boolean }
        title: { type: string }
        message: { type: string }
        summary: { type: string }
        image_url: { type: string, format: url }
        image_scaling: { type: string, enum: [FIT_INSIDE_IMAGE_CONTAINER, FILL_IMAGE_CONTAINER] }
        banner_image_url: { type: string, format: url }
        input_gif_url: { type: string, format: url }
        collapsed_push_notification: { type: string }
        carousel_content: { $ref: '#/components/schemas/PushCarouselContent' }
        default_click_action: { type: string, enum: [DEEPLINKING, NAVIGATE_TO_A_SCREEN, RICH_LANDING] }
        default_click_action_value: { type: string }
        key_value_pairs: { $ref: '#/components/schemas/KeyValuePairsArray' }
    PushCarouselContent:
      type: object
      required: [slider_transition, slide_data]
      properties:
        slider_transition: { type: string, enum: [MANUAL, AUTOMATIC] }
        slide_data:
          type: array
          minItems: 1
          items:
            type: object
            required: [image_url]
            properties:
              image_url: { type: string, format: url }
              image_click_action: { type: string }
              image_click_action_value: { type: string }
              key_value_pairs: { $ref: '#/components/schemas/KeyValuePairsArray' }
    PushTimerDetails:
      type: object
      required: [timer_ends_at]
      properties:
        timer_ends_at: { type: string, enum: [DURATION, SPECIFIC_TIME_USER_TIMEZONE, SPECIFIC_TIME_CAMPAIGN_TIMEZONE] }
        specific_time: { type: string }
        time_period: { type: string }
        personalized_value: { type: boolean }
        duration_hour: { type: string }
        duration_minute: { type: string }
    PushButtonAndroid:
      type: object
      required: [btn_name, click_action_type, click_action_value]
      properties:
        btn_name: { type: string }
        click_action_type: { type: string, enum: [DEEPLINKING, NAVIGATE_TO_A_SCREEN, RICH_LANDING, CALL, SHARE, COPY, SET_USER_ATTRIBUTE, TRACK_EVENT, CUSTOM_ACTION, SNOOZE, REMIND_LATER] }
        click_action_name: { type: string }
        click_action_value: { type: string }
        key_value_pairs: { $ref: '#/components/schemas/KeyValuePairsArray' }
    PushAndroidAdvanced:
      type: object
      properties:
        use_large_icon: { type: boolean }
        make_notification_sticky: { type: boolean }
        dismiss_button_text: { type: string }
        coupon_code: { type: string }
        icon_type_in_notification: { type: string }
        auto_dismiss_notification: { type: boolean }
        auto_dismiss_notification_time_value: { type: number }
        auto_dismiss_notification_time_granularity: { type: string }
        group_key: { type: string, maxLength: 45 }
        collapse_replace_key: { type: string }
    PushAndroidTemplateBackup:
      type: object
      required: [title, message, default_click_action, default_click_action_value]
      properties:
        title: { type: string }
        message: { type: string }
        summary: { type: string }
        image_url: { type: string, format: url }
        default_click_action: { type: string }
        default_click_action_value: { type: string }
        key_value_pairs: { $ref: '#/components/schemas/KeyValuePairsArray' }
    PushIosDetails:
      type: object
      required: [template_type, basic_details]
      properties:
        template_type: { type: string, enum: [BASIC, STYLIZED_BASIC, SIMPLE_IMAGE_CAROUSEL, Custom] }
        basic_details: { $ref: '#/components/schemas/PushIosBasic' }
        buttons: { type: array, items: { $ref: '#/components/schemas/PushButtonIos' } }
        advanced: { $ref: '#/components/schemas/PushIosAdvanced' }
        template_backup: { $ref: '#/components/schemas/PushIosTemplateBackup' }
    PushIosBasic:
      type: object
      required: [title, message]
      properties:
        background_color_code: { type: string }
        apply_background_color_in_text_editor: { type: boolean }
        title: { type: string }
        message: { type: string }
        subtitle: { type: string }
        allow_bg_refresh: { type: boolean }
        rich_media_type: { type: string }
        rich_media_value: { type: string, format: url }
        image_url: { type: string, format: url }
        input_gif_url: { type: string, format: url }
        carousel_content: { $ref: '#/components/schemas/PushCarouselContent' }
        default_click_action: { type: string }
        default_click_action_value: { type: string }
        key_value_pairs: { $ref: '#/components/schemas/KeyValuePairsArray' }
    PushButtonIos:
      type: object
      required: [button_category]
      properties:
        button_category: { type: string }
    PushIosAdvanced:
      type: object
      properties:
        coupon_code: { type: string }
        sound_file: { type: string }
        enable_ios_badge: { type: boolean }
        group_key: { type: string, maxLength: 45 }
        collapse_replace_key: { type: string }
    PushIosTemplateBackup:
      type: object
      required: [title]
      properties:
        title: { type: string }
        message: { type: string }
        subtitle: { type: string }
        allow_bg_refresh: { type: boolean }
        rich_media_type: { type: string }
        rich_media_value: { type: string, format: url }
        default_click_action: { type: string }
        default_click_action_value: { type: string }
        key_value_pairs: { $ref: '#/components/schemas/KeyValuePairsArray' }
    PushWebDetails:
      type: object
      required: [template_type, basic_details]
      properties:
        template_type: { type: string, enum: [BASIC] }
        basic_details: { $ref: '#/components/schemas/PushWebBasic' }
        buttons: { type: array, items: { $ref: '#/components/schemas/PushButtonWeb' } }
        advanced: { $ref: '#/components/schemas/PushWebAdvanced' }
    PushWebBasic:
      type: object
      required: [title, message, redirect_url]
      properties:
        title: { type: string }
        message: { type: string }
        redirect_url: { type: string, format: url }
        image_url: { type: string, format: url }
    PushButtonWeb:
      type: object
      required: [title]
      properties:
        title: { type: string }
        icon_url: { type: string, format: url }
        url: { type: string, format: url }
    PushWebAdvanced:
      type: object
      required: [icon_image_type]
      properties:
        icon_image_type: { type: string, enum: [DEFAULT, ICON_URL] }
        icon_url: { type: string, format: url }
    AdvancedPushSettings:
      type: object
      properties:
        expiration_settings:
          type: object
          properties:
            expire_notification_after_value: { type: integer }
            expire_notification_after_type: { type: string, enum: [HOUR, DAY] }
            remove_from_inbox_after_value: { type: integer }
            remove_from_inbox_after_type: { type: string, enum: [DAY, HOUR] }
        platform_level_priority:
          type: object
          properties:
            android_specific_priority:
              type: object
              properties: { send_with_priority: { type: boolean } }
            ios_specific_priority:
              type: object
              properties:
                apns_priority: { type: string, enum: ['10', '5', '1'] }
                interruption_level: { type: string, enum: [Passive, Active, 'Time sensitive', Critical] }
                relevance_score: { type: number, enum: [0, 0.5, 1] }
    CreateCampaignSuccessResponse:
      type: object
      properties: { campaign_id: { type: string } }

    # --- Search Campaigns Schemas ---
    SearchCampaignsRequest:
      type: object
      required: [limit, page, request_id]
      properties:
        campaign_fields: { $ref: '#/components/schemas/CampaignSearchFields' }
        include_child_campaigns: { type: boolean, default: false }
        include_archive_campaigns: { type: boolean, default: false }
        limit: { type: integer, format: int32, minimum: 1, maximum: 15 }
        page: { type: integer, format: int32, minimum: 1 }
        request_id: { type: string }
    CampaignSearchFields:
      type: object
      properties:
        channels: { type: array, items: { type: string, enum: [EMAIL, PUSH, SMS] } }
        created_by: { type: array, items: { type: string, format: email } }
        created_date: { type: object, properties: { from_date: { type: string, format: date }, to_date: { type: string, format: date } } }
        delivery_type: { type: array, items: { type: string, enum: [ONE_TIME, PERIODIC, EVENT_TRIGGERED, BUSINESS_EVENT_TRIGGERED, DEVICE_TRIGGERED, LOCATION_TRIGGERED, BROADCAST_LIVE_ACTIVITY] } }
        id: { type: string }
        name: { type: string }
        status: { type: array, items: { type: string } }
        tags: { type: array, items: { type: string } }
    SearchCampaignsResponse:
      type: array
      items: { $ref: '#/components/schemas/CampaignObject' }
    CampaignObject:
      type: object
      discriminator: # Discriminator for response content
        propertyName: channel
      properties:
        campaign_id: { type: string }
        status: { type: string }
        channel: { type: string, enum: [EMAIL, PUSH, SMS] }
        campaign_delivery_type: { type: string }
        basic_details:
          oneOf:
            - { $ref: '#/components/schemas/EmailBasicDetails' }
            - { $ref: '#/components/schemas/PushBasicDetails' }
            - { $ref: '#/components/schemas/SmsBasicDetails' }
        campaign_content:
          oneOf:
            - { $ref: '#/components/schemas/CampaignContentEmail' }
            - { $ref: '#/components/schemas/CampaignContentPush' }
            - { $ref: '#/components/schemas/CampaignContentSms' }
        connector: { $ref: '#/components/schemas/ConnectorDetails' }
        sender_name: { type: string, description: Sender name for SMS campaign. }
        control_group_details: { $ref: '#/components/schemas/ControlGroupDetails' }
        conversion_goal_details: { $ref: '#/components/schemas/ConversionGoalDetails' }
        created_by: { type: string, format: email }
        updated_by: { type: string, format: email }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        sent_time: { type: string, format: date-time }
        flow_id: { type: string }
        flow_name: { type: string }
        parent_id: { type: string }
        delivery_controls: { $ref: '#/components/schemas/DeliveryControls' }
        scheduling_details: { $ref: '#/components/schemas/SchedulingDetails' }
        segmentation_details: { $ref: '#/components/schemas/SegmentationDetails' }
        trigger_condition: { $ref: '#/components/schemas/TriggerCondition' }
        utm_params: { $ref: '#/components/schemas/UtmParams' }
        campaign_audience_limit: { $ref: '#/components/schemas/CampaignAudienceLimit' }
    CampaignContentSms:
      type: object
      properties:
        content:
          oneOf:
            - { type: object, title: Direct SMS Content, properties: { sms: { $ref: '#/components/schemas/SmsDetails' } } }
            - { type: object, title: Locale and Variation Content (SMS), additionalProperties: { $ref: '#/components/schemas/SmsVariationContent' } }
        locales: { type: array, items: { type: string } }
        variation_details: { $ref: '#/components/schemas/VariationDetails' }
    SmsVariationContent:
      type: object
      additionalProperties: { type: object, properties: { sms: { $ref: '#/components/schemas/SmsDetails' } } }
    SmsDetails:
      type: object
      properties:
        template_id: { type: string }
        message: { type: string }
        shorten_and_track_url: { type: array, items: { type: object, properties: { url: { type: string, format: url }, is_click_tracking_enabled: { type: boolean } } } }
        opt_out_status: { type: boolean }
        custom_template_id: { type: string }
        custom_template_version: { type: integer }

    # --- Update Campaign Schemas ---
    UpdateCampaignRequest:
      type: object
      required: [request_id, updated_by]
      properties:
        request_id: { type: string, description: Unique ID for the update request. }
        updated_by: { type: string, format: email, description: Email ID of the user performing the update. }
        basic_details: { oneOf: [ { $ref: '#/components/schemas/EmailBasicDetails' }, { $ref: '#/components/schemas/PushBasicDetails' } ], description: Include if updating basic details. Send the *entire* object with updated fields. }
        trigger_condition: { $ref: '#/components/schemas/TriggerCondition' }
        segmentation_details: { $ref: '#/components/schemas/SegmentationDetails' }
        control_group_details: { $ref: '#/components/schemas/ControlGroupDetails' }
        utm_params: { $ref: '#/components/schemas/UtmParams' }
        connector: { $ref: '#/components/schemas/ConnectorDetails' }
        campaign_content: { oneOf: [ { $ref: '#/components/schemas/CampaignContentEmail' }, { $ref: '#/components/schemas/CampaignContentPush' } ], description: Include if updating campaign content. Send the *entire* object. }
        scheduling_details: { $ref: '#/components/schemas/SchedulingDetails' }
        conversion_goal_details: { $ref: '#/components/schemas/ConversionGoalDetails' }
        delivery_controls: { $ref: '#/components/schemas/DeliveryControls' }
        campaign_audience_limit: { $ref: '#/components/schemas/CampaignAudienceLimit' }
        advanced: { $ref: '#/components/schemas/AdvancedPushSettings' }

    # --- Change Status Schemas ---
    ChangeCampaignStatusRequest:
      type: object
      required: [action, campaign_ids, request_id]
      properties:
        action:
          type: string
          enum: [STOP, PAUSE, RESUME]
          description: >-
            STOP (for scheduled One-Time), PAUSE (for Periodic, Event-Triggered, etc.), RESUME (for paused campaigns).
        campaign_ids:
          type: array
          items: { type: string }
          maxItems: 10
          description: A list of campaign IDs to apply the action to (max 10).
        request_id:
          type: string
          description: Unique ID for the status change request.

    # --- Test Campaign Schemas ---
    TestCampaignRequestBase:
      type: object
      required: [request_id, channel, basic_details, campaign_content, test_campaign_meta]
      properties:
        request_id: { type: string, description: Unique ID for the test request. }
        channel: { type: string, enum: [EMAIL, PUSH] }
        utm_params: { $ref: '#/components/schemas/UtmParams' }
        personalization_details: { $ref: '#/components/schemas/PersonalizationDetails' }
        test_campaign_meta: { $ref: '#/components/schemas/TestCampaignMeta' }
    TestEmailCampaignRequest:
      allOf: [ { $ref: '#/components/schemas/TestCampaignRequestBase' } ]
      type: object
      required: [connector]
      properties:
        channel: { type: string, enum: [EMAIL] }
        basic_details: { $ref: '#/components/schemas/EmailBasicDetails' }
        connector: { $ref: '#/components/schemas/ConnectorDetails' }
        campaign_content: { $ref: '#/components/schemas/CampaignContentEmail' }
    TestPushCampaignRequest:
      allOf: [ { $ref: '#/components/schemas/TestCampaignRequestBase' } ]
      type: object
      properties:
        channel: { type: string, enum: [PUSH] }
        basic_details: { $ref: '#/components/schemas/PushBasicDetails' }
        campaign_content: { $ref: '#/components/schemas/CampaignContentPush' }
    PersonalizationDetails:
      type: object
      properties:
        user_attributes:
          type: object
          additionalProperties: true
          description: Key-value pairs to override user attributes for personalization.
        event_attributes:
          type: object
          additionalProperties: true
          description: Key-value pairs to override event attributes for personalization.
    TestCampaignMeta:
      type: object
      required: [identifier, identifier_values]
      properties:
        identifier:
          type: string
          enum: [EMAIL, ID, CUSTOM_SEGMENT, MOBILE_NUMBER, USER_ATTRIBUTE_UNIQUE_ID, USER_ATTRIBUTE_USER_EMAIL, USER_ATTRIBUTE_USER_MOBILE, MOE_GAID, ADVERTISING_IDENTIFIER, PUSH_ID]
        identifier_values:
          type: array
          items: { type: string }
          maxItems: 10
        locale_name: { type: string }
        variation: { type: string }
    TestCampaignResponse:
      type: object
      properties:
        data:
          type: object
          additionalProperties: { $ref: '#/components/schemas/TestStatus' }
        message: { type: string, example: Test campaign created successfully }
    TestStatus:
      type: object
      properties:
        status: { type: string, enum: [success, failed] }
        failure_reason: { type: string }

    # --- Campaign Meta Schemas ---
    CampaignMetaRequest:
      type: object
      required: [limit, page, request_id]
      properties:
        campaign_fields: { $ref: '#/components/schemas/CampaignMetaSearchFields' } # Slightly different from main search
        limit: { type: integer, format: int32, minimum: 1, maximum: 15 }
        page: { type: integer, format: int32, minimum: 1 }
        request_id: { type: string }
        include_child_campaigns: { type: boolean, default: false }
    CampaignMetaSearchFields: # Different enums from CampaignSearchFields
      type: object
      properties:
        id: { type: string }
        channels: { type: array, items: { type: string, enum: [EMAIL, PUSH, SMS, WHATSAPP, FACEBOOK, GOOGLE ADS, CONNECTORS] } }
        created_by: { type: array, items: { type: string, format: email } }
        created_date: { type: object, properties: { from_date: { type: string, description: "Format: YYYY-MM-DD" }, to_date: { type: string, description: "Format: YYYY-MM-DD" } } }
        delivery_type: { type: array, items: { type: string, enum: [ONE_TIME, PERIODIC, EVENT_TRIGGERED, BUSINESS_TRIGGERED] } }
        name: { type: string }
        status: { type: array, items: { type: string } }
        tags: { type: array, items: { type: string } }
    CampaignMetaResponse:
      type: array
      items: { $ref: '#/components/schemas/CampaignMeta' }
    CampaignMeta:
      type: object
      properties:
        campaign_id: { type: string }
        channel: { type: string }
        platform: { type: array, items: { type: string } }
        created_by: { type: string, format: email }
        campaign_delivery_type: { type: string }
        campaign_name: { type: string }
        campaign_team: { type: string }
        campaign_tags: { type: array, items: { type: string } }
        campaign_status: { type: string }
        campaign_start_time: { type: string, format: date-time }
        total_child_campiagns: { type: integer, description: Only for parent periodic campaigns if include_child_campaigns=true. }
        parent_campaign_id: { type: string, description: Only for child periodic campaigns if include_child_campaigns=true. }
        reachability_details: { $ref: '#/components/schemas/ReachabilityDetails' }
    ReachabilityDetails:
      type: object
      properties:
        count: { type: integer }
        last_updated_time: { type: string, format: date-time }

    # --- Get Child Campaigns Schemas ---
    GetChildCampaignsRequest:
      type: object
      required: [limit, page, request_id]
      properties:
        limit: { type: integer, format: int32, minimum: 1, maximum: 15 }
        page: { type: integer, format: int32, minimum: 1 }
        request_id: { type: string }
    GetChildCampaignsResponse:
      type: object
      properties:
        executions:
          type: array
          items: { $ref: '#/components/schemas/CampaignExecution' }
        total_instances:
          type: integer
          description: Total number of times the parent campaign has executed.
    CampaignExecution:
      type: object
      properties:
        campaign_id: { type: string, description: The ID of the child campaign instance. }
        sent_time: { type: string, format: date-time }
        status: { type: string, example: Sent }

    # --- Personalized Preview Schemas ---
    PersonalizedPreviewRequest:
      type: object
      required: [request_id, personalization_details, personalization_content]
      properties:
        request_id: { type: string }
        personalization_content:
          type: object
          description: "Must provide *either* payload or custom_template_data."
          properties:
            payload:
              type: object
              additionalProperties: { type: string }
              description: A key-value map where values are Jinja strings to be rendered.
            custom_template_data:
              type: object
              properties:
                template_id: { type: string }
                version: { type: string } # Docs say string, example shows "1"
          oneOf: # Enforce either/or
            - required: [payload]
            - required: [custom_template_data]
        user_details:
          type: object
          description: Optional. If provided, fetches attributes from this user's profile.
          required: [identifier, identifier_value]
          properties:
            identifier: { type: string, description: "e.g., ID, EMAIL, MOBILE_NUMBER" }
            identifier_value: { type: string, description: "e.g., JOHN012, user@example.com" }
        personalization_details:
          type: object
          required: [channel]
          properties:
            event_name: { type: string, description: Required if personalizing with event attributes. }
            channel: { type: string, enum: [EMAIL, PUSH, SMS] } # Added SMS from example
            user_attributes:
              type: object
              additionalProperties: true
              description: Key-value pairs to override user attributes.
            event_attributes:
              type: object
              additionalProperties: true
              description: Key-value pairs to override event attributes.
    PersonalizedPreviewResponse:
      type: object
      properties:
        personalized_content:
          type: object
          properties:
            payload:
              type: object
              additionalProperties: { } # Value can be string or object (for custom template)
              description: A map with keys matching the request payload, but with rendered Jinja strings as values.
            data: # For custom template response
              type: array
              items:
                type: object
                # ... define custom template structure if needed, or leave as object