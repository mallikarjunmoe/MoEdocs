openapi: 3.0.3
info:
  title: MoEngage Cards API
  description: |
    API for fetching and deleting user-specific Cards from the MoEngage database.
    Allows filtering by platform, category, and checking for updates since the last sync.
    Authentication is via Basic Auth.
    **Note:** The Delete Cards operation uses the `DELETE` HTTP method with a request body, which is non-standard and may not be supported by all tools.
  version: '1.0'
servers:
  - url: 'https://api-{dc}.moengage.com/v1'
    variables:
      dc:
        default: '01'
        description: 'The data center number for your account (e.g., 01, 02, 03).'
tags:
  - name: Cards
    description: Operations related to fetching and deleting user cards.
paths:
  /cards/fetch:
    post:
      tags:
        - Cards
      summary: Fetch Cards for User
      operationId: fetchCards
      description: |
        Fetches cards for a specific user, identified by `uid` or `unique_id`.
        Results can be paginated and filtered by platform, category, and last update time.
      parameters:
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/LimitQuery'
        - $ref: '#/components/parameters/AppKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchCardsRequest'
            example:
              uid: "user@example.com"
              platforms: ["ANDROID", "WEB"]
              # limit query param, not in body
              # page query param, not in body
              last_updated_time": 1695987441
              prev_sync_card_ids": ["6516b30d2712560fdfae50c3_F_T_CA_AB_0_P_0_L_0_web"]
              card_category": "Announcements"
      responses:
        '200':
          description: Successfully retrieved cards.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchCardsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /cards/delete: # Reverted to DELETE and original path
    delete:      # Reverted to DELETE
      tags:
        - Cards
      summary: Delete Cards for User
      operationId: deleteCards
      description: |
        Deletes specific card campaigns for a user, identified by `uid` or `unique_id`. Can target specific platforms.
        **Note:** This operation uses a request body with the `DELETE` method, which is non-standard.
      parameters:
        - $ref: '#/components/parameters/AppKeyHeader'
      requestBody: # Kept requestBody under DELETE
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCardsRequest'
            example:
              uid: "user@example.com"
              campaign_ids": ["campaign_id1", "campaign_id2"]
              platforms": ["android", "ios"]
      responses:
        '200':
          description: Delete request processed. The response details success/failure per platform.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCardsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: 'Uses **Workspace ID** as username and **API Key** (from Campaign report/Business events/Custom templates tile) as password.'
  parameters:
    AppKeyHeader:
      name: MOE-APPKEY
      in: header
      required: true
      description: Your MoEngage Workspace ID. Found in Settings > Account > APIs.
      schema:
        type: string
    PageQuery:
      name: page
      in: query
      required: false
      description: Index of the page to return (starts from 1). Defaults to 1 if omitted.
      schema:
        type: integer
        minimum: 1
        default: 1
    LimitQuery:
      name: limit
      in: query
      required: false
      description: Number of cards per page. If omitted, potentially returns all cards (behavior might vary).
      schema:
        type: integer
        minimum: 1
  schemas:
    # --- Request Schemas ---
    FetchCardsRequest:
      type: object
      properties:
        uid:
          type: string
          description: MoEngage Standard ID (Email or Mobile Number) identifying the user. Provide either `uid` or `unique_id`.
        unique_id:
          type: string
          description: Platform-specific device identifier. Provide either `uid` or `unique_id`.
        platforms:
          type: array
          items:
            type: string
            enum: [ANDROID, IOS, WEB]
          description: Filter cards by platform. If omitted, cards for all platforms are returned.
        card_category:
          type: string
          description: Filter cards by category name. If omitted, cards of all categories are returned.
        prev_sync_card_ids:
          type: array
          items:
            type: string
          description: List of card IDs from the previous sync. Used with `last_updated_time` to fetch only updated/new cards.
        last_updated_time:
          type: integer
          format: int64 # Assuming Unix timestamp in seconds or milliseconds
          description: Unix epoch timestamp of the last sync. Used with `prev_sync_card_ids`.
      oneOf:
        - required: [uid]
        - required: [unique_id]
      description: Must provide either 'uid' or 'unique_id'.
    DeleteCardsRequest:
      type: object
      required:
        - campaign_ids
      properties:
        uid:
          type: string
          description: MoEngage Standard ID (Email or Mobile Number) identifying the user. Provide either `uid` or `unique_id`.
        unique_id:
          type: string
          description: Platform-specific device identifier. Provide either `uid` or `unique_id`.
        campaign_ids:
          type: array
          items:
            type: string
          description: List of campaign IDs whose cards should be deleted for the user.
        platforms:
          type: array
          items:
            type: string
            enum: [ANDROID, IOS, WEB, android, ios, web] # Allow both cases based on example/docs
          description: Specify platforms to delete cards from. If omitted, deletes from all associated platforms.
      oneOf:
        - required: [uid]
        - required: [unique_id]
      description: Must provide either 'uid' or 'unique_id'.

    # --- Response & Component Schemas ---
    CardAction:
      type: object
      properties:
        type:
          type: string
          enum: [screenName, deepLink, richLanding]
          description: Type of action to perform on tap.
        name:
          type: string
          description: Name assigned to the action (e.g., "navigate").
        value:
          type: string
          description: URL, screen name, or deep link value.
        kvPairs:
          type: object
          additionalProperties: true
          description: Key-value pairs associated with the action (e.g., URL parameters).
    CardWidget:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the widget within its container.
        type:
          type: string
          enum: [text, image, button]
          description: Type of widget.
        content:
          type: string
          description: Content of the widget (HTML for text/button, URL for image).
        actions:
          type: array
          items:
            $ref: '#/components/schemas/CardAction'
          description: Actions associated with this widget (typically for buttons).
          nullable: true # Only buttons have actions directly in example
    CardContainer:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the container within the card.
        type:
          type: string
          enum: [basic, illustration]
          description: Type of container layout.
        style:
          type: object
          properties:
            bgColor:
              type: string
              description: Background color hex code (e.g., "#4e3db0").
          additionalProperties: true # Allow other style properties
        widgets:
          type: array
          items:
            $ref: '#/components/schemas/CardWidget'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/CardAction'
          description: Actions associated with tapping the container itself (if any).
    CardTemplateData:
      type: object
      properties:
        type:
          type: string
          enum: [basic, illustration]
          description: Overall template type for the card.
        containers:
          type: array
          items:
            $ref: '#/components/schemas/CardContainer'
    CardMetaData:
      type: object
      properties:
        cid:
          type: string
          description: Unique identifier for the Card instance.
        moe_card_id:
          type: string
          description: Combination of cid and platform.
        moe_campaign_name:
          type: string
          description: Name of the Card campaign.
        moe_delivery_type:
          type: string
          enum: ["One Time", "Event Triggered"] # Based on description
          description: Delivery type of the campaign.
        moe_campaign_id:
          type: string
          description: Unique identifier of the associated campaign.
    CardUserActivity:
      type: object
      properties:
        is_clicked:
          type: boolean
          description: Whether the user has clicked this card.
        first_seen:
          type: integer
          format: int64 # Assuming Unix timestamp
          description: Epoch timestamp when the card was first seen by the user.
        first_delivered:
          type: integer
          format: int64 # Assuming Unix timestamp
          description: Epoch timestamp when the card was first delivered to the user.
        show_count:
          type: object
          additionalProperties:
            type: integer
          description: Map where key is unique_id/uid and value is the number of times fetched for that identifier.
    CardDisplayControls:
      type: object
      properties:
        max_times_to_show:
          type: integer
          description: Maximum number of times the card can be shown.
          nullable: true # Might not always be set
        expire_at: # Assuming actual expiry timestamp, not just duration string
          type: integer
          format: int64 # Assuming Unix timestamp
          description: Epoch timestamp when the card expires.
          nullable: true
        expire_after_delivered: # Keeping original field name too
           type: integer # Or string representing duration? Docs unclear. Assuming timestamp.
           format: int64
           description: Timestamp of card expiry (alternative key name?).
           nullable: true
        is_pin:
          type: boolean
          description: Whether the card should be pinned to the top.
    Card:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the card instance, including platform.
        platform:
          type: string
          enum: [android, ios, web] # Response uses lowercase
        created_at:
          type: integer
          format: int64 # Assuming Unix timestamp
          description: Epoch timestamp when the card was created for the user.
        updated_at:
          type: integer
          format: int64 # Assuming Unix timestamp
          description: Epoch timestamp when the card was last updated for the user.
        meta_data:
          $ref: '#/components/schemas/CardMetaData'
        template_data:
          $ref: '#/components/schemas/CardTemplateData'
        user_activity:
          $ref: '#/components/schemas/CardUserActivity'
        display_controls:
          $ref: '#/components/schemas/CardDisplayControls'
        category:
          type: string
          description: The category assigned to the card campaign.
    FetchCardsResponseData:
      type: object
      properties:
        deleted_card_ids:
          type: array
          items:
            type: string
          description: List of card IDs that have been deleted for this user since the last sync (if `last_updated_time` provided).
        cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
          description: List of active/updated cards matching the criteria.
    FetchCardsResponse:
      type: object
      properties:
        status:
          type: boolean
          description: Indicates if the request was successful.
        request_id:
          type: string
          description: Unique identifier for this API request.
        data:
          $ref: '#/components/schemas/FetchCardsResponseData'
          nullable: true # Might be absent on error
        # Error fields for unsuccessful requests (alternative schema)
        error:
           type: string
           description: Error message if status is false.
           nullable: true
        title:
           type: string
           description: Error title if status is false.
           nullable: true
        description:
           type: string
           description: Error description if status is false.
           nullable: true
        code:
           type: string
           description: Error code if status is false.
           nullable: true
    DeleteCardsPlatformResult:
      type: object
      properties:
        success:
          type: array
          items:
            type: string
          description: List of campaign IDs successfully deleted for this platform.
        failed:
          type: array
          items:
            type: string
          description: List of campaign IDs that failed to delete for this platform.
        invalid:
          type: array
          items:
            type: string
          description: List of campaign IDs that do not exist for this platform for the user.
    DeleteCardsResponseData:
      type: object
      properties:
        android:
          $ref: '#/components/schemas/DeleteCardsPlatformResult'
          nullable: true
        ios:
          $ref: '#/components/schemas/DeleteCardsPlatformResult'
          nullable: true
        web: # Assuming web is also possible though not in example
          $ref: '#/components/schemas/DeleteCardsPlatformResult'
          nullable: true
    DeleteCardsResponse:
      type: object
      properties:
        status:
          type: boolean
          description: Indicates if the request processing started successfully (individual deletions might still fail).
        request_id:
          type: string
          description: Unique identifier for this API request.
        data:
          $ref: '#/components/schemas/DeleteCardsResponseData'
          nullable: true # Might be absent on error
        # Error fields for unsuccessful requests (alternative schema)
        error:
           type: string
           description: Error message if status is false.
           nullable: true
        title:
           type: string
           description: Error title if status is false.
           nullable: true
        description:
           type: string
           description: Error description if status is false.
           nullable: true
        code:
           type: string
           description: Error code if status is false.
           nullable: true
    ErrorResponse: # General structure for 4xx/5xx errors
      type: object
      properties:
        status:
          type: boolean
          example: false
        error:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        code:
          type: string
          nullable: true
        request_id:
          type: string
          nullable: true # Not always present in error examples
  responses:
    BadRequest:
      description: Bad Request. Required parameters missing/invalid, user not found, etc.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missing_uid:
              summary: Missing User ID
              value:
                status: false
                error: "Required field missing. Please include either 'uid' or 'unique_id'"
                request_id": "64f6a59ed1e36d0d57a790c1"
            user_not_found:
               summary: User Not Found
               value:
                 status: false
                 error: "User not found for this uid/ unique_id"
                 request_id": "64f6a59ed1e36d0d57a790c1"
    Unauthorized:
      description: Authorization Failure. Invalid credentials or missing header.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
             auth_failure:
                summary: Auth Failure
                value:
                  title: "Authentication Failure"
                  description": "Invalid APP_SECRET_KEY is provided" # Example uses APP_SECRET, Auth section uses API Key
                  code": "OjueJWoh"
    TooManyRequests:
      description: Rate Limit Breach. Too many requests.
      headers:
        x-ratelimit-limit:
          schema: { type: integer }
        x-ratelimit-remaining:
          schema: { type: integer }
        x-ratelimit-reset:
          schema: { type: integer }
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            title: "Request limit reached"
            description": "This API call has exceeded the rate limit"
            code": "KMxkunyz"
    InternalServerError:
      description: Internal Server Error. Unexpected system error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
             title: "Internal Server Error"
             message": "An unexpected error was encountered while processing this request. Please contact MoEngage Team"

security:
  - basicAuth: []