openapi: 3.0.3
info:
  title: MoEngage Recommendation API
  description: |
    API for fetching recommendation metadata and recommendation results for users.
    Authentication is via Basic Auth.
  version: '1.0'
servers:
  - url: 'https://api-{dc}.moengage.com/v1'
    variables:
      dc:
        default: '01'
        description: 'The data center number for your account (e.g., 01, 02, 03).'
tags:
  - name: Recommendations
    description: Operations related to fetching recommendation configurations and results.
paths:
  /recommendations/{recommendations_id}:
    get:
      tags:
        - Recommendations
      summary: Fetch Recommendation Metadata
      operationId: fetchRecommendationMetadata
      description: |
        Retrieves the metadata associated with a specific recommendation setup using its unique ID.
        This includes details like name, type, status, associated catalog, configuration settings, and timestamps.
      parameters:
        - $ref: '#/components/parameters/AppKeyHeader'
        - $ref: '#/components/parameters/RecommendationIdPath'
      responses:
        '200':
          description: Successfully retrieved recommendation metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationMetadata'
        '400':
          $ref: '#/components/responses/BadRequest' # General bad request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Recommendation Not Found. The specified recommendation ID does not exist or is archived.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error-code: "recommendation does not exist"
                message: "Recommendation does not exist or archived. Please check recommendation_id."
        '413':
          $ref: '#/components/responses/PayloadTooLarge' # Unlikely for GET but listed
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recommendations/{recommendations_id}/items:
    post:
      tags:
        - Recommendations
      summary: Fetch Recommendation Results
      operationId: fetchRecommendationResults
      description: |
        Retrieves the recommended items for a specific user based on a given recommendation setup.
        Requires user ID and, for certain recommendation types, an anchor item ID.
        Allows specifying which item attributes to include in the response.
      parameters:
        - $ref: '#/components/parameters/AppKeyHeader'
        - $ref: '#/components/parameters/RecommendationIdPath'
        - name: RECOMMENDATION-TYPE
          in: header
          required: true
          description: The type of recommendation strategy being used.
          schema:
            type: string
            enum:
              - user_action
              - item_attribute
              - catalog_alert # Note: This was listed but might be internal? Confirm if needed.
              - similar_item
              - frequently_viewed_together
              - frequently_bought_together
              - trending_item
              - user_personalization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchResultsRequest'
            example:
              user_id": "user123@example.com"
              item_id": "product_sku_abc" # Required for similar_item, frequently_*, etc.
              include_fields": ["title", "image_link", "price"]
      responses:
        '200':
          description: Successfully retrieved recommendation results.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/RecommendationResultItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
           description: Recommendation Not Found. The specified recommendation ID does not exist or is archived.
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/ErrorResponse'
        '413':
          $ref: '#/components/responses/PayloadTooLarge'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: 'Uses **Workspace ID** as username and **API Key** (from Campaign/Business Events/Custom Templates/Catalog API tile) as password.'
  parameters:
    AppKeyHeader:
      name: MOE-APPKEY
      in: header
      required: true
      description: Your MoEngage Workspace ID.
      schema:
        type: string
    RecommendationIdPath:
      name: recommendations_id
      in: path
      required: true
      description: The unique identifier for the recommendation setup.
      schema:
        type: string
        example: "a1b2c3d4e5f6a7b8c9d0e1f2"
  schemas:
    Filter:
      type: object
      properties:
        executed: { type: boolean }
        filter_type: { type: string, example: "product_filter" }
        operator_fe: { type: string, example: "exists" }
        name: { type: string, example: "product_id" }
        data_type: { type: string, example: "string" }
        operator: { type: string, example: "exists" }
        value: { type: string, nullable: true }
        negate: { type: boolean }
        case_sensitive: { type: boolean }
        hasError: { type: boolean }
    IncludeExcludeFilters:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
        filter_operator:
          type: string
          enum: [and, or]
    SortCriteria:
      type: object
      properties:
        data_type: { type: string, example: "double" }
        param_type: { type: string, example: "product_attribute" }
        param: { type: string, example: "price" }
        direction: { type: string, enum: ["1", "-1"], description: "1 for ascending, -1 for descending" }
    TrendSettings:
       type: object
       # Specific properties for trend type and duration would go here based on API details
       description: "Defines the trend type and duration (Specific fields depend on implementation)."
       example: { trend_type: "most_viewed", duration_days: 7 }
    CustomSettings:
       type: object
       properties:
         item_filters:
            type: object
            # Further structure depends on possible filters like user_actions, item_attributes etc.
            properties:
               user_actions:
                 type: object # Placeholder
       description: "Defines custom filters applied to recommendations."
    RecommendationMetadata:
      type: object
      properties:
        id: { type: string, description: "Unique recommendation ID." }
        db_name: { type: string, description: "Workspace name." }
        recommendation_type:
          type: string
          enum: [user_action, item_attribute, similar_item, frequently_viewed_together, frequently_bought_together, trending_item, user_personalization]
          description: "Type of recommendation strategy."
        name: { type: string, description: "Name of the recommendation." }
        description: { type: string, nullable: true, description: "Description provided during creation." }
        catalog: { type: string, description: "ID of the associated catalog." }
        catalog_name: { type: string, description: "Name of the associated catalog." } # Added based on example
        status: { type: string, enum: [Active, Archived], description: "Current status." } # Assuming Archived is the opposite of Active
        created_time: { type: string, format: date-time, description: "Timestamp of creation." }
        updated_time: { type: string, format: date-time, description: "Timestamp of last modification." }
        all_user_actions:
          type: boolean
          description: "Whether all user actions are considered for anchor item context (specific types only)."
          nullable: true
        include_filters: # Added based on example
           $ref: '#/components/schemas/IncludeExcludeFilters'
           nullable: true
        exclude_filters: # Assuming exclude might also exist
           $ref: '#/components/schemas/IncludeExcludeFilters'
           nullable: true
        custom_settings:
           $ref: '#/components/schemas/CustomSettings'
           nullable: true
        sort:
           $ref: '#/components/schemas/SortCriteria'
           nullable: true
        trends:
           $ref: '#/components/schemas/TrendSettings'
           nullable: true
    FetchResultsRequest:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: string
          description: Unique identifier for the user.
        item_id:
          type: string
          description: Anchor item ID, required for similar_item, frequently_viewed_together, frequently_bought_together.
          nullable: true
        include_fields:
          type: array
          items:
            type: string
          description: List of item attributes to include in the response. If omitted, all attributes are returned.
          nullable: true
          example: ["title", "price", "image_link"]
    RecommendationResultItem:
      type: object
      description: Represents a recommended item with requested attributes. Structure depends on catalog schema.
      properties:
        # Common mandatory fields based on catalog definition
        item_id: { type: string } # Assuming 'item_id' instead of 'product_id' based on request body
        title: { type: string }
        link: { type: string, format: uri }
        image_link: { type: string, format: uri }
        # Other potential fields shown in example
        catalog_id: { type: string }
        feed_id: { type: string }
        description: { type: string }
        price_currency: { type: string }
        creation_date: { type: string, format: date-time }
        last_updated: { type: string, format: date-time }
        price: { type: number, format: double }
        date: { type: string, format: date } # Example had 'date' field
      additionalProperties: true # Allows for any other catalog attributes
      example:
        item_id: "prod_xyz"
        title": "Stylish Red Scarf"
        link": "https://example.com/products/prod_xyz"
        image_link": "https://example.com/images/prod_xyz.jpg"
        price": 19.99
    ErrorResponse:
      type: object
      properties:
        error-code:
          type: string
          description: Machine-readable error code.
        message:
          type: string
          description: Human-readable error message.
  responses:
    BadRequest:
      description: Bad Request. Invalid input, missing fields, invalid IDs or format.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error-code: "invalid-request-format"
            message": "Invalid format provided for recommendation_id."
    Unauthorized:
      description: Unauthorized. Invalid authentication credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error-code: "request-unauthenticated"
            message: "Your request is unauthorized. Please verify your credentials and try again."
    PayloadTooLarge:
      description: Request Entity Too Large. Payload size exceeds limit (1MB for POST).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error-code: "payload-size-exceeded"
            message: "Your payload size exceeds the 1MB limit. Please reduce the payload size and try again."
    TooManyRequests:
      description: Too Many Requests. Rate limit exceeded.
      headers:
        x-ratelimit-limit:
          schema: { type: integer }
          description: The request limit per time window.
        x-ratelimit-remaining:
          schema: { type: integer }
          description: The remaining requests in the current window.
        x-ratelimit-reset:
          schema: { type: integer }
          description: UTC epoch seconds when the limit resets.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error-code: "too-many-requests"
            message: "Rate limit exceeded."
    InternalServerError:
      description: Internal Server Error. Unexpected system error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error-code: "unexpected-error"
            message: "Something went wrong with your request. Contact the MoEngage team."
security:
  - basicAuth: []