openapi: 3.0.3
info:
  title: MoEngage Catalog API
  description: |
    This API allows for the management of catalogs, including creation, attribute management, and item ingestion, updates, and deletion.
    Authentication is handled via Basic Auth, and all requests require a `MOE-APPKEY` header.
    The API has a rate limit of 100 requests/minute or 1000 requests/hour, with a maximum payload size of 5MB.
  version: '1.0'
servers:
  - url: 'https://api-{dc}.moengage.com/v1'
    variables:
      dc:
        default: '01'
        description: 'The data center number for your account (e.g., 01, 02, 03).'
tags:
  - name: Catalog
    description: Operations related to creating and managing catalog schemas.
  - name: Items
    description: Operations related to ingesting, updating, and deleting items within a catalog.
paths:
  /catalog:
    post:
      tags:
        - Catalog
      summary: Create Catalog
      operationId: createCatalog
      description: |
        Creates a new catalog with a unique name and specifies the necessary attributes along with their respective data types.
        The catalog name must be unique.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCatalogRequest'
            examples:
              example-1:
                summary: Basic catalog creation
                value:
                  name: "SummerCollection2024"
                  price_currency: "USD"
                  attributes:
                    - name: "id"
                      type: "string"
                    - name: "title"
                      type: "string"
                    - name: "link"
                      type: "string"
                    - name: "image_link"
                      type: "string"
                    - name: "price"
                      type: "double"
                    - name: "in_stock"
                      type: "bool"
      responses:
        '201':
          description: Catalog created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  catalog_id:
                    type: string
                    description: The unique ID for the newly created catalog.
                    example: "6a4d7b0f-9e3c-4b1a-8f6e-2d9c0b1a3e5d"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Conflict - A catalog with the provided name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error-code: "duplicate-catalog-name"
                message: "Catalog name already exists. Please use a different name for your catalog and try again."
        '413':
          $ref: '#/components/responses/PayloadTooLarge'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /catalog/{catalog_id}/attributes:
    patch:
      tags:
        - Catalog
      summary: Add Catalog Attributes
      operationId: addCatalogAttributes
      description: |
        Adds new attributes to an existing catalog's schema. If any provided attributes already exist, they are ignored.
        Up to 50 total attributes are allowed per catalog.
      parameters:
        - $ref: '#/components/parameters/CatalogIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - attributes
              properties:
                attributes:
                  type: array
                  description: A list of new attributes to add to the catalog schema.
                  items:
                    $ref: '#/components/schemas/AttributeDefinition'
            examples:
              example-1:
                summary: Add new attributes
                value:
                  attributes:
                    - name: "color"
                      type: "string"
                    - name: "weight_kg"
                      type: "double"
      responses:
        '202':
          description: Accepted. The request was processed. Some attributes might have been duplicates.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  duplicate-item-attributes:
                    type: array
                    description: A list of attributes that already existed in the catalog and were ignored.
                    items:
                      type: string
                    example: ["color"]
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '413':
          $ref: '#/components/responses/PayloadTooLarge'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /catalog/{catalog_id}/items:
    post:
      tags:
        - Items
      summary: Ingest Catalog Items
      operationId: ingestCatalogItems
      description: Adds new items to an existing catalog. A maximum of 50 items can be ingested per request.
      parameters:
        - $ref: '#/components/parameters/CatalogIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  maxItems: 50
                  description: An array of item objects to add to the catalog.
                  items:
                    $ref: '#/components/schemas/CatalogItem'
      responses:
        '200':
          description: OK. The ingestion request was processed. The response body contains details on valid and invalid items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '413':
          $ref: '#/components/responses/PayloadTooLarge'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    patch:
      tags:
        - Items
      summary: Update Catalog Items
      operationId: updateCatalogItems
      description: Updates existing items with new attribute values. A maximum of 50 items can be updated per request.
      parameters:
        - $ref: '#/components/parameters/CatalogIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  maxItems: 50
                  description: An array of item updates. Each object must contain the item `id` and the `attributes` to update.
                  items:
                    $ref: '#/components/schemas/ItemUpdate'
      responses:
        '200':
          description: OK. The update request was processed. The response body contains details on valid and invalid items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '413':
          $ref: '#/components/responses/PayloadTooLarge'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /catalog/{catalog_id}/items/bulk-delete:
    post:
      tags:
        - Items
      summary: Bulk Delete Catalog Items
      operationId: deleteCatalogItems
      description: Deletes up to 50 existing items from a catalog in a single request.
      parameters:
        - $ref: '#/components/parameters/CatalogIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  maxItems: 50
                  description: An array of item IDs to delete from the catalog.
                  items:
                    type: string
                    example: "item_id_123"
      responses:
        '202':
          description: Accepted. The delete request was processed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: object
                    properties:
                      valid:
                        type: object
                        properties:
                          count:
                            type: integer
                            description: The number of items successfully deleted.
                      invalid:
                        type: object
                        properties:
                          count:
                            type: integer
                            description: The number of items that were not found and could not be deleted.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '413':
          $ref: '#/components/responses/PayloadTooLarge'
        '429':
          $ref: '#/components/responses/TooManyRequests'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  parameters:
    AppKeyHeader:
      name: MOE-APPKEY
      in: header
      required: true
      description: The Workspace ID from your MoEngage dashboard.
      schema:
        type: string
    CatalogIdPath:
      name: catalog_id
      in: path
      required: true
      description: The unique identifier for the catalog.
      schema:
        type: string
  schemas:
    AttributeDefinition:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          description: The name of the attribute (e.g., 'color', 'price').
        type:
          type: string
          description: The data type of the attribute.
          enum: [string, bool, double, datetime, geopoint]
    CreateCatalogRequest:
      type: object
      required:
        - name
        - attributes
        - price_currency
      properties:
        name:
          type: string
          description: A unique name for the catalog.
          example: "ProductCatalog"
        price_currency:
          type: string
          description: The ISO 4217 currency code for prices in the catalog.
          enum: [USD, CAD, EUR, AED, AFN, ALL, AMD, AOA, ARS, AUD, AZN, BAM, BDT, BGN, BHD, BIF, BND, BOB, BRL, BWP, BYR, BZD, CDF, CHF, CLP, CNY, COP, CRC, CVE, CZK, DJF, DKK, DOP, DZD, EEK, EGP, ERN, ETB, GBP, GEL, GHS, GNF, GTQ, HKD, HNL, HRK, HUF, IDR, ILS, INR, IQD, IRR, ISK, JMD, JOD, JPY, KES, KHR, KMF, KRW, KWD, KZT, LBP, LKR, LTL, LVL, LYD, MAD, MDL, MGA, MKD, MMK, MOP, MUR, MXN, MYR, MZN, NAD, NGN, NIO, NOK, NPR, NZD, OMR, PAB, PEN, PHP, PKR, PLN, PYG, QAR, RON, RSD, RUB, RWF, SAR, SDG, SEK, SGD, SOS, SYP, THB, TND, TOP, TRY, TTD, TWD, TZS, UAH, UGX, UYU, UZS, VEF, VND, XAF, XOF, YER, ZAR, ZMK]
        attributes:
          type: array
          maxItems: 50
          description: An array defining the schema of attributes for this catalog. 'id', 'title', 'link', and 'image_link' are mandatory.
          items:
            $ref: '#/components/schemas/AttributeDefinition'
    CatalogItem:
      type: object
      required:
        - id
        - title
        - link
        - image_link
      properties:
        id:
          type: string
        title:
          type: string
        link:
          type: string
          format: uri
        image_link:
          type: string
          format: uri
      additionalProperties: true
      example:
        id: "item-sku-123"
        title: "Classic T-Shirt"
        link: "https://example.com/products/item-123"
        image_link: "https://example.com/images/item-123.jpg"
        brand_attribute: "Super Tech"
        in_stock: 10
        original_price: 19.99
    ItemUpdate:
      type: object
      required:
        - id
        - attributes
      properties:
        id:
          type: string
          description: The unique ID of the item to update.
        attributes:
          type: object
          description: A key-value map of attributes to update for the item.
          additionalProperties: true
          example:
            price: 24.99
            in_stock: false
    Error:
      type: object
      properties:
        error-code:
          type: string
          description: A machine-readable error code.
        message:
          type: string
          description: A human-readable description of the error.
    IngestUpdateResponse:
      type: object
      properties:
        message:
          type: object
          properties:
            valid:
              type: object
              properties:
                count:
                  type: integer
                  description: The number of items successfully processed.
            invalid:
              type: object
              properties:
                count:
                  type: integer
                  description: The number of items that failed processing.
                details:
                  type: array
                  items:
                    type: object
                    properties:
                      error-id:
                        type: string
                        example: "duplicate-item-ids"
                      message:
                        type: string
                        example: "Item ids within a catalog must be unique."
                      count:
                        type: integer
                        example: 1
                      document_ids:
                        type: array
                        items:
                          type: string
                        example: ["item_id_xyz"]
  responses:
    BadRequest:
      description: Bad Request - The request is improperly formatted, or contains missing/invalid parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error-code: "invalid-request"
            message: "The data type provided for some of the attributes is invalid."
    Unauthorized:
      description: Unauthorized - The request does not have valid authentication credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error-code: "request-unauthenticated"
            message: "Your request is unauthorized. Please verify your credentials and try again."
    Forbidden:
      description: Forbidden - The client does not have access rights to the content.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error-code: "request-denied"
            message: "Your account does not have access to the Catalog APIs."
    NotFound:
      description: Not Found - The specified resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error-code: "catalog-not-found"
            message: "We could not find any API based catalog for the provided catalog id."
    PayloadTooLarge:
      description: Payload Too Large - The request payload exceeds the 5MB limit.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error-code: "payload-size-exceeded"
            message: "Your payload size exceeds the 5MB limit. Please reduce the payload size and try again."
    TooManyRequests:
      description: Too Many Requests - The rate limit for the API has been exceeded.
      headers:
        x-ratelimit-limit:
          schema:
            type: integer
          description: The maximum number of requests permitted in the time window.
        x-ratelimit-remaining:
          schema:
            type: integer
          description: The number of requests remaining in the current window.
        x-ratelimit-reset:
          schema:
            type: integer
          description: The UTC epoch seconds at which the current window resets.
security:
  - basicAuth: []