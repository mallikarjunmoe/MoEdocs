openapi: 3.0.3
info:
  title: MoEngage Push API
  version: '2.0'
  description: API for sending transactional and targeted push notifications to users across Android, iOS, and Web platforms.
tags:
  - name: Push
    description: Operations to create and send push notification campaigns.
servers:
  - url: 'https://pushapi-0{dc}.moengage.com/v2'
    description: MoEngage Push API Server
    variables:
      dc:
        default: '1'
        description: 'Your MoEngage Data Center (DC). Can be 1, 2, 3, 4, etc.'
        enum:
          - '1'
          - '2'
          - '3'
          - '4'
security:
  - basicAuth: []
    apiKeyAuth: []

paths:
  /transaction/sendpush:
    post:
      tags:
        - Push
      summary: Send Push Notification
      description: |-
        Creates and sends a push notification campaign. Can target all users, a pre-defined custom segment, or specific users based on their attributes.
      requestBody:
        required: true
        description: The complete configuration for the push campaign, including targeting, platform-specific payloads, and delivery options.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushRequest'
            examples:
              targetSingleUser:
                summary: Target a Single User
                value:
                  appId: "YOUR_WORKSPACE_ID"
                  campaignName: "Welcome_Push_To_User_123"
                  signature: "GENERATED_SHA256_SIGNATURE"
                  targetPlatform: ["ANDROID"]
                  targetAudience: "User"
                  targetUserAttributes:
                    attribute: "USER_ATTRIBUTE_USER_EMAIL"
                    comparisonParameter: "is"
                    attributeValue: "test@example.com"
                  payload:
                    ANDROID:
                      title: "Welcome to our App!"
                      message: "Thanks for signing up. Here is a special offer for you."
                  campaignDelivery:
                    type: "soon"
                  advancedSettings:
                    ignoreFC: true
              targetAllUsers:
                summary: Target All Users
                value:
                  appId: "YOUR_WORKSPACE_ID"
                  campaignName: "Holiday_Sale_Announcement"
                  signature: "GENERATED_SHA256_SIGNATURE"
                  targetPlatform: ["ANDROID", "IOS", "WEB"]
                  targetAudience: "All Users"
                  payload:
                    ANDROID:
                      title: "Holiday Sale is LIVE!"
                      message: "Get up to 50% off on all items. Shop now!"
                    IOS:
                      title: "Holiday Sale is LIVE!"
                      message: "Get up to 50% off on all items. Shop now!"
                    WEB:
                      title: "Holiday Sale is LIVE!"
                      message: "Get up to 50% off on all items. Shop now!"
                      redirectURL: "https://example.com/sale"
                      iconURL: "https://example.com/icon.png"
                  campaignDelivery:
                    type: "soon"
      responses:
        '200':
          description: Request received. The status in the response body indicates whether it was successfully processed or failed.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PushSuccessResponse'
                  - $ref: '#/components/schemas/PushFailureResponse'
        '401':
          description: Unauthorized. Invalid authentication credentials.

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: Basic Authentication using Workspace ID as username and Push API Key as password.
    apiKeyAuth:
      type: apiKey
      in: header
      name: MOE-APPKEY
      description: Your MoEngage Workspace ID.

  schemas:
    TargetUserAttributes:
      type: object
      required:
        - attribute
        - comparisonParameter
        - attributeValue
      properties:
        attribute:
          type: string
          description: The user attribute to target.
          enum: [USER_ATTRIBUTE_UNIQUE_ID, USER_ATTRIBUTE_USER_EMAIL, USER_ATTRIBUTE_USER_MOBILE, MOE_GAID, ADVERTISING_IDENTIFIER, PUSH_ID]
        comparisonParameter:
          type: string
          description: The comparison operator.
          enum: [is, in]
        attributeValue:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: The value(s) to match. Use an array for the 'in' operator.
        isCustom:
          type: boolean
          description: Set to true if targeting a custom user attribute.
          default: false

    DefaultAction:
      type: object
      properties:
        type:
          type: string
          enum: [richlanding, navigation, deeplinking]
        value:
          type: string
          description: The URL or deep link path.
        kvPairs:
          type: object
          additionalProperties:
            type: string
          description: Additional key-value pairs to pass with the action.

    AndroidPayload:
      type: object
      required: [message, title]
      properties:
        message: { type: string }
        title: { type: string }
        summary: { type: string }
        groupKey: { type: string }
        collapseReplaceKey: { type: string }
        channel_id: { type: string }
        richContent:
          type: array
          items:
            type: object
            properties:
              type: { type: string, enum: [image, coupon, sound] }
              value: { type: string }
        defaultAction:
          $ref: '#/components/schemas/DefaultAction'
        additionalActions:
          type: array
          maxItems: 2
          items:
            type: object
            properties:
              type: { type: string, enum: [call, snooze, copy, share] }
              value: { type: string }
              name: { type: string }
              iconURL: { type: string }
        fallback: { type: object }

    IOSPayload:
      type: object
      required: [message, title]
      properties:
        message: { type: string }
        title: { type: string }
        subtitle: { type: string }
        groupKey: { type: string }
        collapseReplaceKey: { type: string }
        enableIosBadge: { type: boolean }
        richContent:
          type: array
          items:
            type: object
            properties:
              type: { type: string, enum: [gif, coupon, sound, image, audio, video] }
              value: { type: string }
        defaultAction:
          $ref: '#/components/schemas/DefaultAction'
        additionalActions:
          type: array
          items:
            type: object
            properties:
              category: { type: string }
        fallback: { type: object }

    WebPayload:
      type: object
      required: [message, title, redirectURL, iconURL]
      properties:
        message: { type: string }
        title: { type: string }
        redirectURL: { type: string, format: uri }
        iconURL: { type: string, format: uri }
        imageURL: { type: string, format: uri }
        autoDismiss: { type: boolean }
        fallback: { type: object }

    Payload:
      type: object
      description: Contains platform-specific notification payloads. At least one platform is required based on `targetPlatform`.
      properties:
        ANDROID:
          $ref: '#/components/schemas/AndroidPayload'
        IOS:
          $ref: '#/components/schemas/IOSPayload'
        WEB:
          $ref: '#/components/schemas/WebPayload'

    CampaignDelivery:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: [soon, later, periodic]
        date:
          type: string
          description: "Required for 'later' type. Format: MM/DD/YYYY"
        time:
          type: string
          description: "Required for 'later' and 'periodic' types. Format: HH:MM AM/PM"
        endDate:
          type: string
          description: "Required for 'periodic' type. Format: MM/DD/YYYY"
        repeatAfter:
          type: string
          description: "Repeat interval in days for 'periodic' type."
        timezone:
          type: string
          description: "Timezone for scheduling, e.g., 'Asia/Kolkata'. Defaults to IST if not provided."

    ConversionGoal:
      type: object
      required: [name, eventName]
      properties:
        name: { type: string, description: "Display name for the goal." }
        eventName: { type: string, description: "The raw event name to track." }
        attrs:
          type: object
          properties:
            name: { type: string }
            filter: { type: string }
            value: { oneOf: [{ type: string }, { type: number }, { type: array, items: { type: string } }] }
            type: { type: string, enum: [string, numeric] }

    AdvancedSettings:
      type: object
      properties:
        ttl:
          type: object
          properties:
            ANDROID: { type: integer, description: "TTL in minutes for Android." }
            WEB: { type: integer, description: "TTL in minutes for Web." }
        ignoreFC:
          type: boolean
          description: "Set to true to bypass frequency capping."
        countFC:
          type: boolean
          description: "If ignoreFC is true, set this to true to count this push in the frequency cap."
        notificationPrioritySettings:
          type: object
          properties:
            Android:
              type: string
              enum: [High, Low]
            iOS:
              type: integer
              enum: [1, 5, 10]
        "pushAmp+":
          type: boolean
          description: "Enable Push Amplification Plus."
        preCacheSegment:
          type: boolean
        campaignThrottleTime:
          type: integer
          description: "Time in minutes to spread out the campaign delivery."
        campaignThrottleRpm:
          type: integer
          description: "Requests per minute for throttling. Overrides campaignThrottleTime."
        useJinjaPersonalization:
          type: boolean
          description: "Set to true to enable Jinja personalization in payloads."
        ignoreMinimumDelay:
          type: boolean
          default: true
        inboxExpiry:
          type: integer
          description: "Expiry for the push notification in the App Inbox, in hours."
        iOSTargetDevice:
          type: string
          enum: [apns_device_default_push, apns_device_provisional_push, apns_device_non_provisional_push]
        deliverWhenActive:
          type: boolean
        bypassDND:
          type: boolean

    PushRequest:
      type: object
      required:
        - appId
        - campaignName
        - signature
        - targetPlatform
        - targetAudience
        - payload
        - campaignDelivery
      properties:
        appId: { type: string }
        campaignName: { type: string, minLength: 5 }
        campaignTags: { type: array, items: { type: string } }
        signature: { type: string, description: "SHA256 hash of appId|campaignName|apiKey" }
        requestType: { type: string, default: "push" }
        targetPlatform:
          type: array
          items:
            type: string
            enum: [ANDROID, IOS, WEB]
        targetAudience:
          type: string
          enum: ["All Users", "Custom Segment", "User"]
        customSegmentName:
          type: string
          description: "Required if targetAudience is 'Custom Segment'."
        targetUserAttributes:
          $ref: '#/components/schemas/TargetUserAttributes'
        payload:
          $ref: '#/components/schemas/Payload'
        campaignDelivery:
          $ref: '#/components/schemas/CampaignDelivery'
        conversionGoals:
          type: array
          maxItems: 5
          items:
            $ref: '#/components/schemas/ConversionGoal'
        advancedSettings:
          $ref: '#/components/schemas/AdvancedSettings'

    PushSuccessResponse:
      type: object
      properties:
        status:
          type: string
          enum: [Success]
        requestId: { type: string }
        responseId: { type: string }
        cid: { type: string }

    PushFailureResponse:
      type: object
      properties:
        status:
          type: string
          enum: [Fail]
        Error_Message: { type: string, example: "Campaign Name not found" }
        responseId: { type: string }
        requestId: { type: string }