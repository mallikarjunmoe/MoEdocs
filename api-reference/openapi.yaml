openapi: "3.0.0"
info:
  title: "Product Catalog API"
  version: "1.0.0"
servers:
  - url: "https://api-01.moengage.com/v1"
    description: "Data Center 1"
  - url: "https://api-02.moengage.com/v1"
    description: "Data Center 2"
  - url: "https://api-03.moengage.com/v1"
    description: "Data Center 3"
security:
  - basicAuth: []
    apiKeyHeader: []
paths:
  /catalog:
    post:
      summary: Create Catalog
      description: Create a new catalog with a unique name and specify attributes data type.
      tags:
        - Catalog Metadata
      parameters:
        - name: MOE-APPKEY
          in: header
          required: true
          schema:
            type: string
          description: MoEngage App ID (Workspace ID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  pattern: '^[a-zA-Z0-9]+$'
                  description: Unique name of the catalog. No special characters allowed.
                attributes:
                  type: array
                  items:
                    $ref: '#/components/schemas/Attribute'
              required:
                - name
            examples:
              example1:
                value:
                  name: "exampleCatalog"
                  attributes:
                    - name: "title"
                      data_type: "string"
                    - name: "link"
                      data_type: "string"
                    - name: "id"
                      data_type: "string"
                    - name: "image_link"
                      data_type: "string"
                    - name: "price"
                      data_type: "float"
      responses:
        '201':
          description: Catalog created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  catalog_id:
                    type: string
                    description: ID of the created catalog.
                required:
                  - catalog_id
        '400':
          description: Bad request. Possible issues could be duplicate name, invalid characters or invalid data type for the attribute.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                DuplicateName:
                  value:
                    error-code: name-not-unique
                    message: "Catalog name already exists!"
                InvalidName:
                  value:
                    error-code: name-invalid
                    message: "Catalog name is invalid or has special characters"
                InvalidAttributeDataType:
                  value:
                    error-code: invalid-attr-data-type
                    message: "Data type provided is invalid"
        '413':
          description: Request entity too large.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                MaxAttributes:
                  value:
                    error-code: "too-many-attributes"
                    message: "Maximum allowed attributes is 50"
                PayloadSize:
                  value:
                    error-code: "payload-size-too-large"
                    message: "The payload size is too large. Maximum allowed size is 5MB."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InternalServerError:
                  value:
                    error-code: internal-server-error
                    message: "Internal server error occurred, Please contact MoEngage team."

  /catalog/{catalog_id}/attributes:
    patch:
      summary: Add New Attributes
      description: This method is used to add new attributes to the catalog. It will not accept request if the body contains already existing attributes.
      tags:
        - Catalog Metadata
      parameters:
        - name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - name: MOE-APPKEY
          in: header
          required: true
          schema:
            type: string
          description: MoEngage App ID (Workspace ID)
      requestBody:
        description: List of attribute objects
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Attribute'
      responses:
        '200':
          description: Attribute successfully added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attribute'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                AttributeExists:
                  value:
                    error-code: attribute-exists
                    message: "Attribute already exists in the catalog"

  /catalog/{catalog_id}/products:
    post:
      summary: Ingest Products
      description: Ingest new products into a specified catalog.
      tags:
        - Catalog Products
      parameters:
        - in: path
          name: catalog_id
          schema:
            type: string
          required: true
        - name: MOE-APPKEY
          in: header
          required: true
          schema:
            type: string
          description: MoEngage App ID (Workspace ID)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  maxItems: 50
                  items:
                    type: object
              required:
                - products
            example:
              products:
                - id: "1234567"
                  category: "Electronics"
                  locale: "en_US"
                  image_link: "https://example.com/images/laptop.jpg"
                  title: "Super Laptop"
                  link: "https://example.com/super-laptop"
                  in_stock: 10
                  price: 899.99
      responses:
        '200':
          description: Products ingestion status. The response provides a summary of valid and invalid products.
          content:
            application/json:
              example:
                message:
                  valid:
                    count: 1
                  invalid:
                    count: 1
                    details:
                      - error-id: "invalid-attributes"
                        message: "Product attribute (recommended_price) is not included in catalog's defined attributes"
                        count: 1
                        document_ids:
                          - "78361487"
        '404':
          description: Catalog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CatalogNotFound:
                  value:
                    error-code: "catalog-not-found"
                    message: "Catalog not found for the given id"
        '422':
          description: Unprocessable entity. The request is well-formed but cannot be processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                HighItemCount:
                  value:
                    error-code: "too-many-products"
                    message: "products size should be less than or equal to 50"
    patch:
      summary: Update Existing Products
      description: Update products with new attribute values. Attributes must adhere to the data type defined in the catalog.
      tags:
        - Catalog Products
      parameters:
        - name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - name: MOE-APPKEY
          in: header
          required: true
          schema:
            type: string
          description: MoEngage App ID (Workspace ID)
      requestBody:
        description: List of product objects to be updated
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProductUpdate'
            examples:
              example1:
                value:
                  - product_id: "product1"
                    attributes:
                      price: 1299.99
                      in_stock: 5
                  - product_id: "product2"
                    attributes:
                      price: 49.99
                      online_exclusive: "False"
      responses:
        '200':
          description: Products updated successfully.
          content:
            application/json:
              example:
                message:
                  valid:
                    count: 2
                  invalid:
                    count: 0
        '400':
          description: Bad request, update failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Catalog not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /catalog/{catalog_id}/products/bulk-delete:
    post:
      summary: Delete Existing Products
      description: Delete existing products in a given catalog. A maximum of 50 products can be deleted in a single request.
      tags:
        - Catalog Products
      parameters:
        - name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - name: MOE-APPKEY
          in: header
          required: true
          schema:
            type: string
          description: MoEngage App ID (Workspace ID)
      requestBody:
        description: List of product ids to be deleted
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    type: string
                  maxLength: 50
                  uniqueItems: true
            examples:
              example1:
                value:
                  products: ["product1", "product2"]
      responses:
        '200':
          description: Products deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDeleteResult'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Catalog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: "See [Authentication Guide](api-reference/catalog/create-catalog#authentication) for details on how to generate credentials."
    apiKeyHeader:
      type: apiKey
      in: header
      name: MOE-APPKEY
      description: "Your MoEngage Workspace ID. Found in **Settings > Account > APIs**."
  schemas:
    ErrorResponse:
      type: object
      properties:
        error-code:
          type: string
        message:
          type: string
    Attribute:
      type: object
      required:
        - name
        - data_type
      properties:
        name:
          type: string
          description: The attribute name
        data_type:
          type: string
          enum: [boolean, date, string, float, integer, geopoint]
          description: The data type of the attribute
    ProductUpdate:
      type: object
      required:
        - product_id
        - attributes
      properties:
        product_id:
          type: string
          description: The product id
        attributes:
          type: object
          description: A map of attribute names to their new values.
    ProductDeleteResult:
      type: object
      properties:
        success:
          type: boolean


